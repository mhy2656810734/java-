/**
 * @author 26568
 * @date 2022-10-21 15:08
 */
public class HashMap {
    static class Node {
        public int key;
        public int value;
        public Node next;

        public Node(int key, int value) {
            this.key = key;
            this.value = value;
        }
    }
    public int usedSize;
    public Node[] array;

    public HashMap() {
        this.array = new Node[8];
    }
    // 放入数据
    public void put(int key,int val) {
        Node node = new Node(key,val);
        // 哈希函数：除留余数法
        int index = key % this.array.length;
        Node cur = this.array[index];
        // 如果有相同的值先替换
        while (cur != null) {
            if (cur.key == key) {
                cur.key = key;
                return;
            }
            cur = cur.next;
        }
        // 进行头插法
        // 采用头插法插入数据
        node.next = this.array[index];
        this.array[index] = node;
        usedSize++;
        // 判断与默认的负载因子值相等
        if (loadFacter() >= 0.75f) {
            // 此时需要扩容
            resize();
        }
    }
    private float loadFacter() {
        return this.usedSize*1.0f / this.array.length;
    }
    private void resize() {
        Node[] newArray = new Node[2*this.array.length];
        // 遍历原来数组中的链表加入新数组
        for (int i = 0; i < this.array.length;i++) {
            Node cur = this.array[i];
            while (cur !=  null) {
                Node curNext = cur.next;
                int newIndex = cur.key % newArray.length;
                cur.next = newArray[newIndex];
                newArray[newIndex] = cur;
                cur = curNext;
            }
        }
        array = newArray;
    }
    public int get(int key) {
        int index = key % this.array.length;
        Node cur = array[index];
        while (cur != null) {
            if (cur.key == key) {
                return cur.value;
            }
            cur = cur.next;
        }

        return -1;
    }

    public static void main(String[] args) {
        HashMap hashMap = new HashMap();
        hashMap.put(1,11);
        hashMap.put(9,11);
        hashMap.put(3,11);
        hashMap.put(8,11);
        hashMap.put(10,11);
        hashMap.put(13,11);
        hashMap.put(16,11);
        System.out.println(hashMap.get(11));

    }
}
