package sort;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Random;

/**
 * 堆排序
 * 时间复杂度: O(n*longn)
 * 空间复杂度：O（1）
 * 稳定性:不稳定
 * @author 26568
 * @date 2022-10-14 15:09
 */
public class HeapSortText {
    public static void main(String[] args) {
        int[] arr = {5,9,10,7,3,2,0,20,14,31};
        heapSort(arr);
        System.out.println(Arrays.toString(arr));
        textHeapSort();
    }
    public static  void heapSort(int[] arr) {
        createBigHeap(arr);
        int end = arr.length - 1;
       while (end > 0) {
           // 交换堆顶和堆尾
           int temp = arr[0];
           arr[0] = arr[end];
           arr[end] = temp;
           // 然后调整
           siftDown(arr,0,end);
           end--;
       }
    }
    // 首先要创建大堆
    public static void createBigHeap(int[] arr) {
        for (int parent = (arr.length-1-1)/2;parent >= 0;parent--) {
            siftDown(arr,parent,arr.length);
        }
    }
    public static  void siftDown(int[] arr,int parent,int len) {
        int child = 2*(parent)+1;
        while (child < len) {
            if (child + 1 < len && arr[child] < arr[child + 1]) {
                child++;
            }
            if (arr[child] > arr[parent]) {
                int temp = arr[child];
                arr[child] = arr[parent];
                arr[parent] = temp;
                parent = child;
                child = 2*parent + 1;
            } else {
                break;
            }
        }
    }
    public static void textHeapSort() {
        int[] arr = new int[100000];
        Random random = new Random();
        for (int i = 0; i < arr.length;i++) {
            arr[i] = random.nextInt();
        }
        long start = System.currentTimeMillis();
        heapSort(arr);
        long end = System.currentTimeMillis();
        System.out.println("桶排序耗时"+(end - start));
    }
}
