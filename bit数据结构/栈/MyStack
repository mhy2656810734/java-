package exercise;

import java.util.Arrays;
import java.util.Map;
import java.util.Stack;

/**
 * @author 26568
 * @date 2022-09-23 17:11
 */
public class MyStack {
    public int[] elem;
    public int usedSize;
    public static final int MAX_SIZE = 10;
    // 构造方法

    public MyStack() {
        this.elem = new int[MAX_SIZE];
    }
    // 压栈
    public int push(int val) {
        // 首先判断容量
        if (isFull()) {
            this.elem = Arrays.copyOf(this.elem,this.elem.length*2);
        }
        this.elem[this.usedSize++] = val;
        return val;
    }
    private boolean isFull() {
        return this.usedSize == this.elem.length;
    }
    // 出栈
    public int pop() {
        if (empty()) {
            throw new EmptyException("栈为空，出栈失败");
        }
        return this.elem[--this.usedSize];
    }
    private boolean empty() {
        return this.usedSize == 0;
    }
    // 查看栈顶元素
    public int peek() {
        if (empty()) {
            throw new EmptyException("栈为空，出栈失败");
        }
        return this.elem[usedSize-1];

    }
}
class EmptyException extends RuntimeException {
    public EmptyException() {
    }

    public EmptyException(String message) {
        super(message);
    }

    public static void main(String[] args) {
        MyStack myStack = new MyStack();
        myStack.push(1);
        myStack.push(2);
        myStack.push(3);
        System.out.println(myStack.pop());
        System.out.println(myStack.peek());
    }
}
