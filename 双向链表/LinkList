
class Node {
    public int data;
    public Node next;
    public Node prev;
    public Node (int data) {
        this.data =  data;
    }
}
public class LinkList {
    public Node head;// 头结点
    public Node tail;// 尾结点
    /**
     *  尾插法
     */
    public void addLast(int data) {
        Node node = new Node(data);
        // 判断是不是第一次插入
        if (this.head == null) {
            this.head = node;
            this.tail = node;
            return;
        }
        // 不是第一次
        this.tail.next = node;
        node.prev = this.tail;
        this.tail = node;// tail必须后移
    }
    /**
     *  头插法
     */
    public void addFirst(int data) {
        Node node = new Node(data);
        // 第一次插入
        if (this.head == null) {
            this.head = node;
            this.tail = node;
            return;
        }
        node.next = this.head;
        this.head.prev = node;
        this.head = node;// 头结点向前移动
    }
    /**
     * 打印链表
     */
    public void display() {
        Node cur = this.head;
        while (cur != null) {
            System.out.print(cur.data+" ");
            cur = cur.next;
        }
        System.out.println();
    }
    /**
     * 查询数据
     */
    public boolean contains(int data) {
        if (this.head == null) {
            throw new RuntimeException("链表为空，操作失败");
        }
        Node cur = this.head;
        while (cur != null) {
            if (cur.data == data) {
                return true;
            }
            cur = cur.next;
        }
        return false;
    }
    /**
     * 求链表元素个数
     */
    public int size() {
        if (this.head == null) {
            throw new RuntimeException("链表为空，操作失败");
        }
        int count = 0;
        Node cur = this.head;
        while (cur != null) {
            count++;
            cur = cur.next;
        }
        return count;
    }
    /**
     * 检查index位置的合法性
     */
    public boolean checkIndex(int index) {
        if (index < 0 || index > this.size()) {
            return true;
        }
        return false;
    }
    /**
     * 在index位置插入数据
     */
    public void addIndex(int index, int data) {
        // 1.检查index位置合法性
        if (checkIndex(index)) {
            throw new RuntimeException("Index 位置不合法");
        }
        if (index == 0) {
            this.addFirst(data);
        }
        if (index == this.size()) {
            this.addLast(data);
        }
        // 找到index位置
        Node cur = this.head;
        while (index- 1 >= 0) {
            cur = cur.next;
            index--;
        }
        Node node =  new Node(data);
        node.next = cur;
        node.prev =  cur.prev;
        cur.prev.next = node;
        cur.prev = node;
    }
    /**
     * 删除第一次出现的关键字key
     */
    public  void delKey(int key) {
        if (this.head == null) {
            throw new RuntimeException("链表为空，操作失败");
        }
        Node cur = this.head;
        int flag = 1;
        while (cur != null) {
            // 分情况讨论是否是头结点
            if (cur.data == key) {
                flag = 0;
                // 如果是头结点
               if(cur == this.head) {
                   this.head = this.head.next;
                   this.head.prev = null;
                   break;
               } else {
                   // 如果是尾结点
                   if (cur == this.tail) {
                       cur.prev.next = null;
                   } else {
                       cur.prev.next = cur.next;
                       cur.next.prev = cur.prev;
                   }
                 break;
               }
            }
            cur = cur.next;
        }
        if (flag == 1) {
            System.out.println("没有你要删除的数据");
        }
    }
    /**
     * 删除所有关键字key
     */
    public void delAllKey(int key){
        if (this.head == null) {
            throw new RuntimeException("链表为空，操作失败");
        }
        Node prev = this.head;
        Node cur = prev.next;
        while (cur != null) {
            if (cur.data == key) {
                cur = cur.next;
                prev.next = cur;
                continue;
            }
            prev = cur;
            cur = cur.next;
        }
        // 检查头结点
        if (this.head.data == key) {
            this.head = this.head.next;
            this.head.prev = null;
        }
    }
    /**
     * 清除链表
     */
    public void clear() {
        while (this.head != null) {
            Node cur = this.head.next;;
            this.head.next = null;
            this.head.prev = null;
            this.head = cur;
        }
        this.tail = null;
    }
}
