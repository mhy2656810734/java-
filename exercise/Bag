import java.util.Scanner;

// 注意类名必须为 Main, 不要有任何 package xxx 信息
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        // 注意 hasNext 和 hasNextLine 的区别
        while (in.hasNextInt()) {
            int n = in.nextInt();// 物品数量
            int bagV = in.nextInt();// 背包体积
            // 物品体积
            int[] v = new int[n];
            // 物品价值
            int[] w = new int[n];
            for (int i = 0; i < n; i++) {
                v[i] = in.nextInt();
                w[i] = in.nextInt();
            }
            // // 第一问的答案
            // int ret1 = func(n, bagV, v, w);
            // // 第二问的答案
            // int ret2 = text(n, bagV, v, w);

            // 空间优化后的
            int ret1 = func1(n, bagV, v, w);
            int ret2 = text1(n, bagV, v, w);
            System.out.println(ret1);
            System.out.println(ret2);
        }
    }
    public static int func(int n, int bagV, int[] v, int[] w) {
        // 1.状态表示
        // dp[i]表示从前i个物品中挑选，选出的最大价值
        // 这样的状态表示，显然是不正确的
        // 因为,假如要选第i个物品，但是此时不知道背包容量，这个物品能不能选无法保证
        // 因此，还需要知道背包体积j
        // dp[i][j]表示在前i个物品中挑选，总体积不超过j，所有选法中，挑出的最大价值
        // 2.状态转移方程
        // 根据最后一个位置划分情况
        // 2.1如果选第i个位置的物品
        //    dp[i][j] = w[i]+dp[i-1][j-v[i]]
        // 这里有个前提，如果要装i物品，那么此时的体积j - v[i] >= 0
        // 状态转移方程意思是：如果选i物品，那么要保证体积能装下这个v[i]
        // 然后在前i-1个物品中，体积不超过j-v[i]中选最大值，因为v[i]是i物品体积
        // 2.1如果不选第i个位置的物品
        // dp[i][j] = dp[i-1][j]   直接在前i-1个物品中找最大值
        // 上述二者取最大值
        // 3.初始化
        // 状态转移方程出现了 i-1和j-v[i],要保证第一行不越界
        // j-v[i] 会判定，不必考虑越界
        // 多加一行和一列
        // 全部都为0
        // 4.填表顺序
        // 从上到下  从左到右
        // 5.返回值
        // dp[n][bagV]

        // 创建dp表
        int[][] dp = new int[n + 1][bagV + 1];
        // 填表
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= bagV; j++) {
                // 先不选i位置物品
                dp[i][j] = dp[i - 1][j];
                // 如果体积能够装下第i个物品，选择装第i个物品
                if (j - v[i - 1] >= 0) {
          dp[i][j] = Math.max(dp[i][j], w[i - 1] + dp[i - 1][j - v[i - 1]]);
                }
            }
        }
        return dp[n][bagV];
    }
    public static int text(int n, int bagV, int[] v, int[] w) {
        // dp[i]表示从前i个物品中挑选，选出的最大价值
        // 这样的状态表示，显然是不正确的
        // 因为,假如要选第i个物品，但是此时不知道背包容量，这个物品能不能选无法保证
        // 因此，还需要知道背包体积j
        // dp[i][j]表示在前i个物品中挑选，总体积等于j，所有选法中，挑出的最大价值
        // 2.状态转移方程
        // 根据最后一个位置划分情况
        // 2.1如果不选择第i个物品
        // dp[i][j] = dp[i-1][j],但是，前i-1个物品真的能够装满体积j吗？
        // 显然是不一定的，因此，我们可以做个约定
        // 约定dp[i][j] == -1 表示前i个物品不能装满体积j
        // 此时，如果选择装第i个物品
        // 则，先让dp[i][j] = dp[i-1][j] 无需判断dp[i-1][j]是不是等于-1
        // 因为，即使dp[i-1][j]== -1，说明dp[i][j]也等于-1，则不能选
        // 只关注第i个物品能选的那种情况即可
        // 2.2如果选择第i个物品
        // dp[i][j] = w[i]+dp[i-1][j-v[i]]
        // 此时需要保证，前i-1个一定能够装满体积j-v[i] 并且j-v[i] >= 0
        // 所以要先判断 j-v[i] >= 0 && dp[i-1][j-v[i]] != -1
        // 3.初始化
        // 状态转移方程出现了 i-1和j-v[i],要保证第一行不越界
        // j-v[i] 会判定，不必考虑越界
        // 多加一行和一列
        // dp[0][0]==0 表示不选物品，价值为0，是成立的
        // 初始化第一行:第一行表示不选物品，体积为j,显然不成立，因此dp[0][j]=-1
        // 初始化第一列:第一列表示在第i个物品中挑选体积为0
        // 不选i物品即可,因此dp[i][0]=0
        // 4.填表
        // 从左到右 从上到下
        // 5.返回值
        // dp[n][bagV]

        // 创建 dp表
        int[][] dp = new int[n + 1][bagV + 1];
        // 初始化
        dp[0][0] = 0;
        // 初始化第一行
        for (int j = 1; j <= bagV; j++) {
            dp[0][j] = -1;
        }
        // 第一列不用初始化，默认是0
        // 填表
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= bagV; j++) {
                // 先不选i物品
                dp[i][j] = dp[i - 1][j];
                // 选择第i个物品
                if (j - v[i - 1] >= 0 && dp[i - 1][j - v[i - 1]] != -1) {
                    dp[i][j] = Math.max(dp[i][j], w[i - 1] + dp[i - 1][j - v[i - 1]]);
                }
            }
        }
        // 如果dp[n][bagv]不能装，等于-1，最后返回0即可
        return dp[n][bagV] == -1 ? 0 : dp[n][bagV];
    }
    // 空间优化
    public static int func1(int n, int bagV, int[] v, int[] w) {
        // 创建dp表
        // 去掉横坐标  使用一维数组
        // 当前dp[j] 仅仅依赖于dp[j] 和 dp[j-v[i]]
        // 当需修改dp[j]的时候要用到前两个位置
        // 但是如果从左到右填表的话，前两个位置会被覆盖，因此：从右到填表
        int[] dp = new int[bagV + 1];
        // 填表
        for (int i = 1; i <= n; i++) {
            for (int j = bagV; j >= v[i - 1]; j--) {
                //dp[j] = dp[j]直接去掉即可
                // 将这个判定条件直接加入循环
                // if (j >= v[i-1]) {
                //     dp[j] = dp[j-v[i-1]]+w[i-1];
                // }
                dp[j] = Math.max(dp[j], dp[j - v[i - 1]] + w[i - 1]);
            }
        }
        return dp[bagV];
    }
    public static int text1(int n, int bagV, int[] v, int[] w) {
        // 创建dp表
        // 去掉横坐标  使用一维数组
        // 当前dp[j] 仅仅依赖于dp[j] 和 dp[j-v[i]]
        // 当需修改dp[j]的时候要用到前两个位置
        // 但是如果从左到右填表的话，前两个位置会被覆盖，因此：从右到填表
        int[] dp = new int[bagV+1];
        // 初始化
        for (int j = 1; j <= bagV;j++) {
            dp[j] = -1;
        }
        // 填表
        for (int i = 1; i <= n;i++) {
            for (int j = bagV;j >= v[i-1];j--) {
                if (dp[j-v[i-1]] != -1) {
                    dp[j] = Math.max(dp[j],dp[j - v[i - 1]] + w[i - 1]);
                }
            }
        }
        return dp[bagV]==-1?0:dp[bagV];
    }
}
