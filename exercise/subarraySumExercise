class Solution {
    public int subarraySum(int[] nums, int k) {
        // 解题思路：使用前缀和
        // 题目要求是找到整个数组的和为k的连续子数组出现的个数
        // sum[i] 是以i结尾的数组的和
        // 可以将其转化成，在 [0,i-1] 区间内找有多少个sum[i] - k 
        // 可以使用哈希表记录每次前缀和出现的次数
        // 但是需要注意特殊情况，当整个数组和为k的话，需要提前处理hash.put(0,1)
        // 也就是默认会出现这种情况
        Map<Integer,Integer> hash = new HashMap<>();
        hash.put(0,1);
        int sum = 0,ret = 0;// sum 是前缀和  ret 是最终统计的结果
        // sum 是[0,i-1] 区间的和
        for (int x : nums) {
            // 统计当前的前缀和
            sum += x;
            // 累加结果
            ret += hash.getOrDefault(sum-k,0);
            // 将当前的前缀和放入哈希表
            hash.put(sum,hash.getOrDefault(sum,0)+1);
        }
        return ret;
    }
}
