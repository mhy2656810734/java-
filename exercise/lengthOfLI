class Solution {
    public int lengthOfLIS(int[] nums) {
        // 1.状态表示
        // dp[i] 表示以i位置结尾的数组的最长的子序列的长度
        // 2.状态转移方程
        // 2.1长度为1
        //   dp[i] = 1
        // 2.2长度大于1  i位置和0~i-1 位置的进行拼接，前提是nums[i]要大 然后取这段区间的最大值
        //   dp[i] = dp[i-1]+1 
        // 二者求最大值
        // 3.初始化
        // 出现i-1考虑第一个位置是否越界
        // 4.填表顺序
        // 从左到右
        // 5.返回值
        // 返回整个dp表中的最大值

        int n = nums.length;
        if (n == 1) return n;
        int[] dp = new int[n];
        Arrays.fill(dp,1);
        int retMax = 0;
        for (int i = 1; i < n;i++) {
            // 让i跟在前面区间的子序列后面
            for (int j = 0; j < i;j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[j] + 1,dp[i]);
                }
            }
            retMax = Math.max(retMax,dp[i]);
        }
        return retMax;
    }
}
