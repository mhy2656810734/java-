class SwapMoney {
    public static int INF = 0X3f3f3f3f;
    public int coinChange(int[] coins, int amount) {
        // 思路解析:这就是完全背包问题 需要装满amount
        //  1.状态表示
        // dp[i][j]表示在前i个硬币中挑选，金额刚好等于j的最少硬币个数
        // 2.状态转移方程
        // 根据最后一个位置划分问题
        // 2.1如果不选择i位置的金币
        // dp[i][j] = dp[i-1][j]
        // 2.2如果选择i位置的金币
        // j-coins[i] >= 0&&dp[i][j-conins[i]] != -1
        // 综上：dp[i][j] = min(dp[i-1][j],dp[i-1][j-coins[i]]+1)
        // 3.初始化
        // 出现了i-1多开一行一列避免越界
        // 初始化第一行:0个物品，不能满足金额j，又由于求min，所以这些位置初始化为0x3f3f3f3f
        // 4.填表顺序
        // 上到下，左到右
        // 5.返回值
        // dp[n][amount] != -1 

        // 创建dp 表
        // if (amount == 0) {
        //     return 0;
        // }
        // int n = coins.length;
        // int[][] dp = new int[n+1][amount+1];
        // // 初始化
        // for (int j = 1; j <= amount;j++) {
        //     dp[0][j] = INF;
        // }
        // // 填表
        // for (int i = 1; i <= n;i++) {
        //     for (int j =0; j <= amount;j++) {
        //         // 先不选
        //         dp[i][j] = dp[i-1][j];
        //         // 满足条件选
        //         if (j >= coins[i-1] && dp[i][j-coins[i-1]] != INF) {
        //             dp[i][j] = Math.min(dp[i][j],dp[i][j-coins[i-1]]+1);
        //         }
        //     }
        // }
        // return dp[n][amount] >=INF?-1:dp[n][amount];

        // 使用空间优化，将横坐标全部去掉即可，完全背包从左到右填表，01从右往左
        // 创建dp 表
        if (amount == 0) {
            return 0;
        }
        int n = coins.length;
        int[] dp = new int[amount+1];
        // 初始化
        for (int j = 1; j <= amount;j++) {
            dp[j] = INF;
        }
        // 填表
        for (int i = 1; i <= n;i++) {
            for (int j =1; j <= amount;j++) {
                // 先不选
               // dp[j] = dp[j];
                // 满足条件选
                if (j >= coins[i-1] ) {
                    dp[j] = Math.min(dp[j],dp[j-coins[i-1]]+1);
                }
            }
        }
        return dp[amount] >=INF?-1:dp[amount];
    } 
}
