/**
 * 使用单链表实现栈
 * @author 26568
 * @date 2022-09-24 16:00
 */
public class MyStack {
    static class ListNode {
        public int val;
        public MyQueue.ListNode next;
        public ListNode(int val) {
            this.val = val;
        }
    }
    public MyQueue.ListNode head;// 队头
    public int usedSize;//记录有效数据个数
    // 入栈
    public void push(int val) {
        MyQueue.ListNode node = new MyQueue.ListNode(val);
        // 先判断是不是队列为空
        if (this.head == null) {
            this.head = node;
        } else {
            // 不为空就取头插法插入数据
            node.next = this.head;
            this.head = node;
        }
        usedSize++;
    }
    // 出栈
    public int pop() {
        if (empty()) {
            System.out.println("栈为空");
            return - 1;
        }
        int index = this.head.val;
        this.head = this.head.next;
        // 判断是否只有一个节点
        usedSize--;
        return index;
    }
    // 判断栈是否为空
    public boolean empty() {
        return usedSize == 0;
    }
    // 查看栈顶数据
    public int peek() {
        if (empty()) {
            return -1;
        }
        return this.head.val;
    }
    // 得到有效数据个数
    public int size() {
        return usedSize;
    }

    public static void main(String[] args) {
        MyStack myStack = new MyStack();
        myStack.push(1);
        myStack.push(2);
        myStack.push(3);
        myStack.push(4);
        System.out.println(myStack.size());
        System.out.println(myStack.pop());
        System.out.println(myStack.peek());
    }
}
