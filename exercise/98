import sun.reflect.generics.tree.Tree;

/**
 * @author 26568
 * @date 2022-10-20 11:49
 */
class BinarySearchTree1 {
    static class TreeNode {
        public int val;
        public TreeNode left;
        public TreeNode right;

        public TreeNode(int val) {
            this.val = val;
        }
    }
    public TreeNode root;
    // 查找
    public TreeNode search(int val) {
        TreeNode cur =root;
        while (cur != null) {
            if (cur.val < val) {
                cur  = cur.right;
            } else if (cur.val > val) {
                cur = cur.left;
            } else {
                return cur;
            }
        }
        return null;
    }
    // 添加节点
    public boolean insert(int val) {
        if (root == null) {
            root = new TreeNode(val);
            return true;
        }
        TreeNode cur = root;
        TreeNode parent = null;
        while (cur != null) {
            if (cur.val < val) {
                parent = cur;
                cur = cur.right;
            } else if (cur.val > val) {
                parent =cur;
                cur = cur.left;
            } else {
                return false;
            }
        }
        TreeNode node = new TreeNode(val);
        if (val < parent.val) {
            parent.left = node;
        } else {
            parent.right = node;
        }
        return true;
    }
    // 删除节点
    public void remove(int key) {
        TreeNode cur  = root;
        TreeNode parent = null;
        while (cur != null) {
            if (cur.val == key) {
                removeNode(parent,cur);
            } else if (cur.val < key) {
                parent = cur;
                cur = cur.right;
            } else {
                parent = cur;
                cur = cur.left;
            }
        }
    }
    public void removeNode(TreeNode parent,TreeNode cur) {
        if (cur.left == null) {
            if (cur == root) {
                root = cur.right;
            } else if (cur == parent.left) {
                parent.left = cur.right;
            } else {
                parent.right = cur.right;
            }
        } else if (cur.right == null) {
            if (cur == root) {
                root = cur.left;
            } else if (cur == parent.left) {
                parent.left = cur.left;
            } else {
                parent.right = cur.left;
            }
        } else {
            TreeNode targetParent = cur;
            TreeNode target = cur.right;
            while (target.left !=  null)  {
                targetParent = target;
                target = targetParent.left;
            }
            cur.val = target.val;;
            if (target == targetParent.left) {
                targetParent.left = target.right;
            } else {
                targetParent.right = target.right;
            }

        }
    }
    public void  inOrder(TreeNode root) {
        if (root == null) {
            return;
        }
        inOrder(root.left);
        System.out.print(root.val+" ");
        inOrder(root.right);
    }
}
public class TextSearchTree {
    public static void main(String[] args) {
        int[] arr = {5,3,4,1,7,8,2,6,0,9};
        BinarySearchTree1 binarySearchTree = new BinarySearchTree1();
        for (int i = 0; i < arr.length; i++) {
            binarySearchTree.insert(arr[i]);
        }
        binarySearchTree.inOrder(binarySearchTree.root);
        binarySearchTree.remove(7);
        binarySearchTree.inOrder(binarySearchTree.root);
    }
}
