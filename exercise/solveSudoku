class Solution {
    public boolean[][] checkRow,checkCol;
    public boolean[][][] grid;
    public void solveSudoku(char[][] board) {
        checkRow = new boolean[9][10];
        checkCol = new boolean[9][10];
        grid = new boolean[3][3][10];
        for (int i = 0; i < 9;i++) {
            for (int j = 0; j < 9;j++) {
                if (board[i][j] != '.') {
                    int num = board[i][j] - '0';
                    checkCol[j][num] = checkRow[i][num] = grid[i/3][j/3][num] = true;
                }
            }
        }
        dfs(board);
    }
    public boolean dfs(char[][] board) {
        for (int i = 0; i < 9;i++) {
            for (int j = 0; j < 9;j++) {
                if (board[i][j] == '.') {
                    for (int n = 1; n <= 9;n++) {
                        if (!checkRow[i][n] && !checkCol[j][n] && 
                        !grid[i/3][j/3][n]) {
                            board[i][j] = (char)('0' + n);
                            checkRow[i][n] = checkCol[j][n]=grid[i/3][j/3][n]=true;
                            if (dfs(board)) return true;
                            board[i][j]='.';
                            checkRow[i][n] = checkCol[j][n]=grid[i/3][j/3][n]=false;
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
}
