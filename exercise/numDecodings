class Solution {
    public int numDecodings(String s) {
        // 1.状态转移方程
        // dp[i] 表示到i位置的解码方法的总数
        // 2.状态转移方程
        // 根据最后一个位置的情况进行划分
        // 对于i位置来说，s[i] != '0' 自己可以解码，则解码总数为 dp[i - 1]
        //               i-1 位置 和i 位置组合成的整数  10 <= num1 <= 26 可以组合解码,则解码总数为dp[i- 2]
        // 因此 dp[i] = dp[i-1] + dp[i- 2]
        // 3.初始化
        // 状态转移方程出现了 i- 2 考虑前两个位置
        // 如果 s[0] != '0' dp[0] = 1
        // 如果 s[1] != '0' dp[1] = 1  如果 s[0]和s[1]组合的数字 在10~26 dp[1] = 2;
        // 4.填表顺序
        // 从左到右
        // 5.返回值
        // dp[n = 1

        int n = s.length();
        int[] dp = new int[n];
        char[] arr = s.toCharArray();
        if (arr[0] != '0') dp[0] = 1;
        if (n == 1) return dp[0];
        if (arr[0] != '0' && arr[1] != '0') dp[1] = 1;
        // 判断前两个是否可以组合解码
        int num1 =( arr[0] - '0') *10 + arr[1] - '0';
        if (num1 >= 10 && num1 <= 26)  dp[1] += 1;
        for (int i = 2; i < n;i++) {
            // 单独解码
            if (arr[i] != '0') dp[i] += dp[i-1];
            // 组合解码
            num1 = (arr[i -1] - '0') * 10 + arr[i] -'0';
            if (num1 >= 10 && num1 <= 26) dp[i] += dp[i-2];
             
        }
        return dp[n-1];
    }
}
