class Solution {
    public int tribonacci(int n) {
        // 1.状态表示
        // 2.状态转移方程
        // 3.初始化
        // 4.填表顺序
        // 5.返回值
        // 1.状态表示
        // dp 表里面的值所表示的含义
        // 2.状态转移方程
        // dp[i] 等于什么  dp[i] = dpi-1 + i-2 + i-3
        // 3.初始化
        // 保证填表的时候不越界
        // dp[0] = 0; dp[1] = 1; dp[2] = 1;
        // 4.填表顺序
        // 为了填写当前状态的时候，所需要的状态已经计算过了
        // 5.返回值
        // 题目要求 + 状态表示

        // 写代码的顺序
        // 1.创建dp 表
        // 2.初始化
        // 3.填表
        // 4.返回值
        // 处理边界
        if (n == 0) {
            return 0;
        }
        if (n == 1 || n == 2) return 1;
        // int[] dp = new int[n+1];
        // dp[0] = 0;
        // dp[1] = 1;
        // dp[2] = 1;
        // for (int i = 3; i <= n;i++) {
        //     dp[i] = dp[i-1] + dp[i-2] + dp[i-3];
        // }
        // return dp[n];
        

        // 空间优化    
        // 使用到滚动数组:在填dp表的时候，仅需要中间有效的若干个状态
        int a = 0, b = 1, c = 1, d = 0;
        for (int i = 3; i <= n;i++) {
            d = a + b + c;
            a = b;
            b = c;
            c = d;
        }
        return d;
    }
}
