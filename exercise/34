/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int postIndex = 0;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        postIndex = postorder.length - 1;
        return buildTreeChild(inorder,postorder,0,inorder.length-1);
    }
    public TreeNode buildTreeChild(int[] inorder,int[] postorder,int begin,int end) {
        if (begin > end) {
            return null;
        }
        TreeNode root = new TreeNode(postorder[postIndex]);
        int index  = find(postorder[postIndex],inorder,begin,end);
        postIndex--;
        if (index == -1) {
            return null;
        }
        root.right = buildTreeChild(inorder,postorder,index+1,end);
        root.left = buildTreeChild(inorder,postorder,begin,index-1);
        return root;
    }
    public int find(int val,int[] inorder,int begin,int end) {
        for (int i = begin;i <= end;i++) {
            if (inorder[i] == val) {
                return i;
            }
        }
        return -1;
    }
}
