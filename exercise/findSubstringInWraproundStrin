class Solution {
    public int findSubstringInWraproundString(String s) {
        // 1.状态表示
        // dp[i] 表示以i位置结尾的s的所有子串在base中出现的次数
        // 2.状态转移方程
        // 对于i位置结尾的字符来说，可以分为两种情况
        // 2.1长度为1
        // 则dp[i] = 1
        // 2.2长度大于1 如果i位置字符和i-1位置字符在base中出现过，则
        // dp[i] = dp[i - 1] + 1
        // 对dp[i] 求和
        // 3.初始化
        // dp[i]全部初始化为1
        // 4.填表顺序
        // 从左到右 从上到下
        // 5.返回值
        // 统计dp表中记录然后返回
        int n = s.length();
        int[] dp = new int[n];
        Arrays.fill(dp,1);
        for (int i = 1; i < n;i++) {
            // 如果前一个字符和当前字符的组合在在base中
            char c1 = s.charAt(i-1);
            char c2 = s.charAt(i);
            if (c1 + 1 == c2 || c1 == 'z' && c2 == 'a') {
                dp[i] += dp[i-1]; 
            }
        }
        // 需要进行去重，因为这里可能会重复统计以某个字符结尾的字符串
        int[] hash = new int[26];
        char[] arr = s.toCharArray();
        for (int i = 0; i < n;i++) {
            hash[arr[i] - 'a'] = Math.max(hash[arr[i] - 'a'],dp[i]);
        }
        int ret = 0;
        for (int x : hash) {
            ret += x;
        }
        return ret;
    }
}
