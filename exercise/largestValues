/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        // 解题思路：队列+层序遍历
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        List<Integer> list = new ArrayList<>();
        if (root == null) return list;
        while (!queue.isEmpty()) {
            // 先统计队列中的节点个数
            int sz = queue.size();
            int maxNum = Integer.MIN_VALUE;
            while (sz-- != 0) {
                TreeNode cur = queue.poll();
                maxNum = Math.max(maxNum,cur.val);
                if (cur.left != null) queue.offer(cur.left);
                if (cur.right != null) queue.offer(cur.right);
            }
            list.add(maxNum);
        }
        return list;
    }
}
