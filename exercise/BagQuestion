import java.util.Scanner;

// 注意类名必须为 Main, 不要有任何 package xxx 信息
public class BagQuestion{
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        // 注意 hasNext 和 hasNextLine 的区别
        while (in.hasNextInt()) { // 注意 while 处理多个 case
            int n = in.nextInt();
            int bagV = in.nextInt();
            int[] v = new int[n];
            int[] w = new int[n];
            for (int i = 0; i < n; i++) {
                v[i] = in.nextInt();
                w[i] = in.nextInt();
            }
            // 第一问
            int ret1 = func1(n, bagV, v, w);
            // 第二问
            int ret2 = text1(n, bagV, v, w);
            System.out.println(ret1);
            System.out.println(ret2);
        }
    }
    public static int func1(int n, int bagV, int[] v, int[] w) {
        // 1.状态表示
        // dp[i][j]表示:从前i个物品中挑选，体积不超过j，所有选法中的最大价值
        // 2.状态转移方程
        // 根据最后一个位置来划分问题
        // 2.1如果不选第i个物品
        // dp[i][j] = dp[i-1][j]
        // 2.2如果选第i个物品（可以重复选）
        // 这里就要分情况讨论了
        // a).如果选一次i物品
        //    dp[i][j] = dp[i-1][j-v[i]]+w[i]   前提:j >= v[i]
        // b).如果选两次i物品
        //    dp[i][j] = dp[i-1][j-2v[i]]+2w[i] 前提: j >= 2v[i]
        // c).如果选三次i物品
        //    dp[i][j] = dp[i-1][j-3v[i]]+3w[i]
        //   ........
        // d).如果选k次i物品，第k+1次超过体积了
        //    dp[i][j] = dp[i-1][j-kv[i]]+kw[i]
        // 由于选的是最大价值
// dp[i][j] = max(dp[i-1][j],dp[i-1][j-v[i]]+w[i],dp[i-1][j-2v[i]]+2w[i]....
//                dp[i-1][j-kv[i]]+kw[i])
// 由于j每次变化v[i],因此，使用数学的方法，让j-v[i]
// dp[i][j-v[i]]=max(dp[i-1][j-v[i]],dp[i-1][j-2v[i]]+2w[i]....
//                dp[i-1][j-xv[i]]+xw[i])
//  这里的x和k细想一下，其实是相等的，因为最后都是j-xv[i]或j-kv[i] <= 0的
//  比较一下上述两个式子
//  会发现，如果给dp[i][j-v[i]]+w[i] 就可以替换dp[i][j]=max里面的第二个参数
//  因此，dp[i][j] = max(dp[i-1][j],dp[i][j-v[i]]+w[i])
        // 3.初始化
        //  状态转移方程出现了 i-1 和 j-v[i] 需要考虑第一行
        //  多开一行 和 一列，j-v[i]每次都会判断，因此并不会越界，直接填表即可
        //  初始化第一行:第一行是i为0，表示不选物品，但体积有，所以不可能，则都为0
        //  第一列不必初始化
        // 4.填表顺序
        //   从左到右 从上到下
        // 5.返回值
        // dp[n][bagV]

        // 创建dp表
        int[][] dp = new int[n + 1][bagV + 1];
        // 初始化
        // 填表
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= bagV; j++) {
                // 先不选i位置
                dp[i][j] = dp[i - 1][j];
                // 判断体积是否足以装下i物品
                if (j >= v[i - 1]) {
                    dp[i][j] = Math.max(dp[i][j], dp[i][j - v[i - 1]] + w[i - 1]);
                }
            }
        }
        return dp[n][bagV];
    }
    public static int text1(int n, int bagV, int[] v, int[] w) {
        // 1.状态表示
        // dp[i][j]表示:从前i个物品中挑选，体积等于j，所有选法中的最大价值
        // 2.状态转移方程
        // 根据最后一个位置来划分问题
        // 2.1如果不选第i个物品
        // dp[i][j] = dp[i-1][j]
        // 2.2如果选第i个物品（可以重复选）
        // 这里就要分情况讨论了
        // a).如果选一次i物品
        //    dp[i][j] = dp[i-1][j-v[i]]+w[i]   前提:j >= v[i] j <= v[i] == -1
        // b).如果选两次i物品
        //    dp[i][j] = dp[i-1][j-2v[i]]+2w[i] 前提: j >= 2v[i]
        // c).如果选三次i物品
        //    dp[i][j] = dp[i-1][j-3v[i]]+3w[i]
        //   ........
        // d).如果选k次i物品，第k+1次超过体积了
        //    dp[i][j] = dp[i-1][j-kv[i]]+kw[i]
        // 由于选的是最大价值
// dp[i][j] = max(dp[i-1][j],dp[i-1][j-v[i]]+w[i],dp[i-1][j-2v[i]]+2w[i]....
//                dp[i-1][j-kv[i]]+kw[i])
// 由于j每次变化v[i],因此，使用数学的方法，让j-v[i]
// dp[i][j-v[i]]=max(dp[i-1][j-v[i]],dp[i-1][j-2v[i]]+2w[i]....
//                dp[i-1][j-xv[i]]+xw[i])
//  这里的x和k细想一下，其实是相等的，因为最后都是j-xv[i]或j-kv[i] <= 0的
//  比较一下上述两个式子
//  会发现，如果给dp[i][j-v[i]]+w[i] 就可以替换dp[i][j]=max里面的第二个参数
//  因此，dp[i][j] = max(dp[i-1][j],dp[i][j-v[i]]+w[i])
        // 3.初始化
        //  状态转移方程出现了 i-1 和 j-v[i] 需要考虑第一行
        //  多开一行 和 一列，j-v[i]每次都会判断，因此并不会越界，直接填表即可
        //  初始化第一行:第一行是i为0，表示不选物品，但体积要j，所以不可能,则都为-1
        //  第一列不必初始化
        // 4.填表顺序
        //   从左到右 从上到下
        // 5.返回值
        // 如果不能装满，最后就是-1,然后返回0,否则能装满
        // dp[n][bagV]

        // 用-1来表示不能装满

        // 创建dp 表
        int[][] dp = new int[n+1][bagV+1];
        // 初始化
        dp[0][0] = 0;
        for (int j = 1; j <= bagV;j++) {
            dp[0][j] = -1;
        }
        // 填表
        for (int i =  1; i <= n;i++) {
            for (int j = 0; j <= bagV;j++) {
                // 先不选择i物品
                dp[i][j] = dp[i-1][j];
                if (j >= v[i-1] && dp[i][j-v[i-1]] != -1) {
                    dp[i][j] = Math.max(dp[i][j],dp[i][j-v[i-1]]+w[i-1]);
                }
            }
        }
        return dp[n][bagV] == -1?0:dp[n][bagV];
    }
}
