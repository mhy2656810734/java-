import java.util.Scanner;

// 注意类名必须为 Main, 不要有任何 package xxx 信息
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        // 注意 hasNext 和 hasNextLine 的区别
        while (in.hasNextInt()) { // 注意 while 处理多个 case
            int n = in.nextInt();// 物品个数
            int bagV = in.nextInt();// 背包体积
            int[] v = new int[n];// 物品体积
            int[] w = new int[n];// 物品价值
            for (int i = 0; i < n; i++) {
                v[i] = in.nextInt();
                w[i] = in.nextInt();
            }
            // 第一问
            int ret1 = func1(n, bagV, v, w);
            System.out.println(ret1);
            // 第二问
            int ret2 = func2(n, bagV, v, w);
            System.out.println(ret2);
        }
    }
    // 第一问
    public static int func1(int n, int bagV, int[] v, int[] w) {
        // 1.创建dp表
        //多开一行一列
        int[][] dp = new int[n + 1][bagV + 1];
        // 2.初始化
        // 不用初始化
        // 3.填表
        // 从上往下并且从左到右
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= bagV; j++) {
                // 不选该物品
                dp[i][j] = dp[i - 1][j];
                // 和另外的状态转移方程对于求最大值
                // 注意下标映射
                if (j - v[i - 1] >= 0) {
                    dp[i][j] = Math.max(dp[i][j], dp[i][j - v[i - 1]] + w[i - 1]);
                }
            }
        }
        // 4.返回值
        return dp[n][bagV];
    }
    // 第二问
    public static int func2(int n, int bagV, int[] v, int[] w) {
        // 1.创建dp表
        //多开一行一列
        int[][] dp = new int[n + 1][bagV + 1];
        // 2.初始化
        for (int j = 1;j <= bagV;j++) {
            dp[0][j] = -1;
        }
        // 3.填表
        // 从上往下并且从左到右
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= bagV; j++) {
                // 不选该物品
                dp[i][j] = dp[i - 1][j];
                // 和另外的状态转移方程对于求最大值
                // 注意下标映射
                if (j - v[i - 1] >= 0 && dp[i][j-v[i-1]] != -1) {
                    dp[i][j] = Math.max(dp[i][j], dp[i][j - v[i - 1]] + w[i - 1]);
                }
            }
        }
        // 4.返回值
        // 返回之前判断是否可以装满
        return dp[n][bagV] == -1?0:dp[n][bagV];
    }
}
