/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 // 核心思路：判断根节点左子树的左子树和根节点的右子树的右子树是否相等
          // 以及根节点的左子树的右子树和根节点的右子树的左子树是否相等
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) {
            return true;
        }
        return isSymmetricChild(root.left,root.right);
    }
    // 判断两棵树是否相等
    public boolean isSymmetricChild(TreeNode leftNode,TreeNode rightNode) {
        if ((leftNode == null && rightNode != null) || (leftNode != null && rightNode == null)) {
            return false;
        }
        if ((rightNode == null) && (leftNode == null)) {
            return true;
        }
        // 判断值
        if (leftNode.val != rightNode.val) {
            return false;
        }
        // 再判断leftNode的左子树和rightNode的右子树和leftNode的右子树和rightNode的左子树是否相等
        return isSymmetricChild(leftNode.left,rightNode.right) &&
         isSymmetricChild(leftNode.right,rightNode.left);
    }
}
