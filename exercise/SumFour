class Solution {
    public int SumFour(int[] nums, int target) {
        // 分析题意
        // 这里是求所有能组成target的排列个数
        // 而背包问题是：有限制条件下的“组合”问题
        // dp[i][j]表示在i前个物品中挑选，体积不超过j，所有选法中的最大价值
        // 因此，这道题并不能使用完全背包解决
        // 1.状态表示
        // dp[i] 表示凑成总和i，一共有多少种排列数
        // 2.状态转移方程
        // 根据最后一个位置来划分问题
        // nums[j] 表示最后一个位置的数，j位置可以是数组任意的一个数，题目的意思是从前j个里面选出来总和为i的
        // 因此，如果选j位置的元素，那么就是在数组前面的元素中凑出总和为 i-nums[j]
        // 一个nums[i] 对应一个dp[i-nums[j]]
        // 因此 dp[i] = dp[i-nums[j]]  （前提i >= nums[j]）
        // 3.初始化
        // dp[0] 表示凑成总和为0，将空集也当做一种选法，因此dp[0] = 1;
        // 而且，如果dp[0] = 0 后续填表都是0
        // 4.填表顺序
        // 从左到右
        // 5.返回值
        // dp[target]

        // 创建dp表
        int[] dp = new int[target+1];
        // 初始化
        dp[0] = 1;
        // 填表
        for (int i = 1; i <= target;i++) {
            for (int j = 0; j < nums.length;j++) {
                if (i >= nums[j]) {
                    dp[i] += dp[i-nums[j]];
                }
            }
        }
        // 返回值
        return dp[target];
    }
}
