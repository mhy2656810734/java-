/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        // 解法1：使用优先级队列，直接将所有结点都加入小根堆，然后弹出直接合并
        // PriorityQueue<ListNode> heap = new PriorityQueue<>((v1,v2) -> v1.val - v2.val);
        // for (ListNode node:lists) {
        //     if (node != null) {
        //          heap.offer(node);
        //     }  
        // }
        // ListNode newHead = new ListNode(-1);
        // ListNode cur = newHead;
        // while (!heap.isEmpty()) {
        //     ListNode t = heap.poll();
        //     cur.next = t;
        //     cur = t;
        //     if (t.next != null) heap.offer(t.next);
        // }
        // return newHead.next;
        // 解法二：使用归并排序
        return mergeSort(lists,0,lists.length - 1);
    }
    public ListNode mergeSort(ListNode[] lists,int left,int right) {
        if (left > right) return null;
        // 当left和right相等，说明只有一个节点，直接返回即可
        if (left == right) return lists[left];
        // 1.划分区间
        int mid = left + (right - left) / 2;
        ListNode l1 = mergeSort(lists,left,mid);
        ListNode l2 = mergeSort(lists,mid+1,right);
        // 2.合并两个有序链表
        return mergeTwoListNode(l1,l2);
    }
    public ListNode mergeTwoListNode(ListNode l1,ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        ListNode cur1 = l1;
        ListNode cur2 = l2;
        ListNode newHead = new ListNode(-1);
        ListNode prev = newHead;
        while ((cur1 != null) && (cur2 != null)) {
            if (cur1.val <= cur2.val) {
                prev.next = cur1;
                prev = cur1;
                cur1 = cur1.next;
            } else {
                prev.next = cur2;
                prev = cur2;
                cur2 = cur2.next;
            }
        }
        if (cur1 != null) prev.next = cur1;
        if (cur2 != null) prev.next = cur2;
        return newHead.next;
    }
}
