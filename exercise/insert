import java.lang.reflect.Array;
import java.util.*;

public class insert {
    // 时间复杂度：O（n^2）  空间复杂度：O（1） 稳定
    public static void main(String[] args) {
        int[] arr = {5, 9, 10, 7, 3, 2, 0, 20, 14, 31};
        //selectSort2(arr);
        shellSort(arr);
        System.out.println(Arrays.toString(arr));
    }
    // 选择排序
    // 时间复杂度：O（n^2）  空间复杂度:O(1) 不稳定
    public static void selectSort(int[] arr){

        for (int i = 0; i < arr.length;i++) {
            int minIndex = i;
            for (int j = i+1; j < arr.length;j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            if (minIndex != i) {
                int temp = arr[minIndex];
                arr[minIndex] = arr[i];
                arr[i] = temp;
            }
        }
    }
    public static void selectSort2(int[] arr) {
        int left = 0;
        int right = arr.length -1;
        while (left <= right) {
            int minIndex = left;
            int maxIndex = left;
            for (int j= left+1;j <= right;j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex =j;
                }
                if (arr[j] > arr[maxIndex]) {
                    maxIndex = j;
                }
            }
            swap(arr,left,minIndex);
            if (left == maxIndex) {
                maxIndex = minIndex;
            }
            swap(arr,maxIndex,right);
            left++;
            right--;
        }
    }
    public static  void swap(int[] arr,int i,int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    // 希尔排序
    // 时间复杂度:O(N^1.3) 空间复杂度O(1) 不稳定
    public static void shellSort(int[] arr) {
        int gap = arr.length;
        while (gap > 1) {
            gap /= 2;
            shell(arr,gap);
        }
    }
    public static void shell(int[] arr,int gap) {
        for (int i = gap; i < arr.length;i++) {
            int j =  i -gap;
            int temp = arr[i];
            for (;j >= 0;j-= gap) {
                if (arr[j] > temp) {
                    arr[j+gap] = arr[j];
                } else {
                    break;
                }
            }
            arr[j+gap] = temp;
        }
    }
}
