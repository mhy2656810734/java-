/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> list = null;
    public List<String> binaryTreePaths(TreeNode root) {
        list = new ArrayList<>();
        dfs(root,new StringBuilder());
        return list;
    }
    public void dfs(TreeNode root,StringBuilder path) {
        if (root == null) return;
        StringBuilder str = new StringBuilder(path);
        str.append(Integer.toString(root.val));
        if (root.left == null && root.right == null) {
            list.add(str.toString());
            return;
        }
        str.append("->");
        dfs(root.left,str);
        dfs(root.right,str);
    }
}
