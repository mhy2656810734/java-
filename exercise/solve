class Solution {
    public int[][] flag = {{1,0},{-1,0},{0,-1},{0,1}};
    public int n,m;
    public void solve(char[][] board) {
        n = board.length;
        m = board[0].length;
        for (int i = 0; i< n;i++) {
            if (board[i][0] == 'O' ) {
                dfs(board,i,0);
            }
            if (board[i][m-1] == 'O') {
                dfs(board,i,m-1);
            }
        } 
        for (int j = 0; j < m;j++) {
            if (board[0][j] == 'O') {
                dfs(board,0,j);
            }
            if (board[n-1][j] == 'O') {
                dfs(board,n-1,j);
            }
        }
        for (int i = 0; i < n;i++) {
            for (int j = 0; j < m;j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == '.') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    public void  dfs(char[][] grid,int x,int y) {
        grid[x][y] = '.';
        for (int i = 0; i < 4;i++) {
            int newX = x + flag[i][0];
            int newY = y + flag[i][1];
            if (newX >= 0 && newX < n && newY >= 0 && newY < m && grid[newX][newY] == 'O') {
                dfs(grid,newX,newY);
            }
        }
    }
}
