class Solution {
    public int n,m;
    public int[][] flag = {{1,0},{-1,0},{0,-1},{0,1}};
    public int[][] memo;
    public int longestIncreasingPath(int[][] matrix) {
        n = matrix.length;
        m = matrix[0].length;
        int ret = 0;
        memo = new int[n][m];
        for (int i = 0; i < n;i++) {
            for (int j = 0; j < m;j++) {
                ret = Math.max(ret,dfs(matrix,i,j));
            }
        }
        return ret;
    }
    public int dfs(int[][] grid,int i,int j) {
        if (memo[i][j] != 0) return memo[i][j];
        int ret = 1;
        for (int k = 0; k < 4;k++) {
            int x = i + flag[k][0];
            int y = j + flag[k][1];
            if (x >= 0 && x < n && y >= 0 && y < m && grid[x][y] < grid[i][j]) {
                ret = Math.max(ret,dfs(grid,x,y)+1);
            }
        }
        memo[i][j] = ret;
        return ret;
    }
}
