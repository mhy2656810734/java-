class Solution {
    public int[][] flag = {{1,0},{0,1},{-1,0},{0,-1}};
    public int n,m;
    public void solve(char[][] board) {
        // 解题思路：使用BFS或者DFS
        // 先将四条边的0连通块改成.
        // 然后遍历原来的矩阵，将.改成0，遇到0改成X即可
        n = board.length;
        m = board[0].length;
        // BFS两列两边
        for (int i = 0; i < n;i++) {
            if (board[i][0] == 'O') {
                bfs(board,i,0);
            }
            if (board[i][m-1] == 'O') {
                 bfs(board,i,m-1);
            }
        }
        for (int j = 0; j < m;j++) {
            if (board[0][j] == 'O') bfs(board,0,j);
            if (board[n-1][j] == 'O') bfs(board,n-1,j);
        }
        for (int i = 0; i < n;i++) {
            for (int j = 0; j < m;j++) {
                if (board[i][j] == '.') {
                    board[i][j] = 'O';
                } else if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
        }
    }
    public void bfs(char[][] grid,int i,int j) {
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{i,j});
        grid[i][j] = '.';
        while (!queue.isEmpty()) {
            int[] t = queue.poll();
            int a = t[0];
            int b = t[1];
            for (int k = 0;k < 4;k++) {
                int x = a + flag[k][0];
                int y = b + flag[k][1];
                if (x >= 0 && x < n && y >= 0 && y < m && grid[x][y] == 'O') {
                    queue.offer(new int[]{x,y});
                    grid[x][y] = '.';
                } 
            }
        }
    }
}
