import java.util.Random;
import java.util.Stack;

class LinkedList {
    static class Node {
        public int val;
        public Node next;

        public Node(int val) {
            this.val = val;
        }
    }
    public Node head;
    // 打印链表
    public void display() {
        if (this.head == null)  {
            System.out.println("链表为空");
            return;
        }
        Node cur = this.head;
        while (cur != null) {
            System.out.print(cur.val+" ");
            cur = cur.next;
        }
        System.out.println();
    }
    // 递归逆序打印
    public void display1(Node head) {
        if (head != null) {
            display1(head.next);
            System.out.print(head.val+" ");
        }
    }
    // 栈逆序打印
    public void display2() {
        Node cur = this.head;
        Stack<Node> stack = new Stack<>();
        while (cur != null) {
            stack.push(cur);
            cur = cur.next;
        }
        while (!stack.empty()) {
            Node node = stack.pop();
            System.out.print(node.val+" ");
        }
    }
    // 头插法
    public void addFirst(int val) {
        Node node = new Node(val);
        node.next = this.head;
        this.head = node;
    }
    // 尾插法
    public void addLast(int val) {
        Node node = new Node(val);
        if (this.head == null) {
            this.head = node;
            return;
        }
        Node cur = this.head;
        while (cur.next != null) {
            cur = cur.next;
        }
        cur.next = node;
    }
    // 求长度
    public int size() {
        Node cur = this.head;
        int count = 0;
        while (cur != null) {
            count++;
            cur = cur.next;
        }
        return count;
    }
    // 判断是否包含key值
    public boolean contains(int key) {
        Node cur = this.head;
        if (cur == null) {
            throw new EmptyException("单链表为空");
        }
        while (cur != null) {
            if (cur.val == key) {
                return true;
            }
            cur = cur.next;
        }
        return false;
    }
    // 任意位置插入
    public void addIndex(int index,int val) {
        if (index < 0 || index > size()) {
            System.out.println("index位置不合法");
            return;
        }
        // 头插尾插
        if (index == 0) {
            addFirst(val);
            return;
        }
        if (index == size()) {
            addLast(val);
            return;
        }
        // 正常插入
        Node prev = find(index);
        Node node = new Node(val);
        node.next = prev.next;
        prev.next = node;
    }
    public Node find(int index) {
        Node cur = this.head;
        while (index - 1 > 0) {
            index--;
            cur = cur.next;
        }
        return cur;
    }
    // 删除第一次key值数据
    public void remove(int key) {
        if (this.head == null) {
            System.out.println("单链表为空");
            return;
        }
        Node cur = this.head;
        if (this.head.val == key) {
            this.head = this.head.next;
            return;
        }
        Node prev = findPrev(key);
        if (prev == null) {
            System.out.println("没有你要删除的数据");
            return;
        }
        prev.next = prev.next.next;
    }
    public Node findPrev(int key) {
        Node cur = this.head.next;
        while (cur.next != null) {
            if (cur.next.val == key) {
                return cur;
            }
            cur = cur.next;
        }
        return null;
    }
    // 删除所有key值
    public void removeAll(int key) {
        if (this.head == null) {
            System.out.println("单链表为空");
            return;
        }
        Node prev = this.head;
        Node cur = this.head.next;
        while (cur != null) {
            if (cur.val == key) {
                prev.next = cur.next;
            } else {
                prev = cur;
            }
            cur = cur.next;
        }
        if (this.head.val == key) {
            this.head = this.head.next;
        }
    }
    // 清空单链表
    public void clear() {
        this.head = null;
    }
}
public class Exercise {
    public static void main(String[] args) {
            LinkedList linkedList = new LinkedList();
            // 头插法
            for (int i = 0; i < 5;i++) {
                linkedList.addFirst(i);
            }
            linkedList.display();
            //  尾插法
//            for (int i = 0; i < 5;i++) {
//                linkedList.addLast(4);
//            }
            //linkedList.display();
            System.out.println(linkedList.size());
            System.out.println(linkedList.contains(10));
            // 在下标处插入
            linkedList.addIndex(2,999);
            linkedList.addIndex(3,100);
            linkedList.addIndex(7,999);
            linkedList.display();
            linkedList.remove(9);
            linkedList.display();
            linkedList.removeAll(999);
            linkedList.display1(linkedList.head);
            linkedList.clear();

    }
    }
class EmptyException extends RuntimeException {
    public EmptyException() {
    }

    public EmptyException(String message) {
        super(message);
    }
}
