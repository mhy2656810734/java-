class Solution {
    public int n,m;
    public int[][] flag ={{1,0},{0,1},{-1,0},{0,-1}};
    public int numEnclaves(int[][] grid) {
        // 解题思路：典型的多源最短路径问题+正难则反
        // 可以将四条边上的1加入队列，然后来一次多源BFS即可解决问题
        // 将和边路相连的1全部修改为2，最后遍历原数组即可统计个数
        Queue<int[]> q = new LinkedList<>();
        m = grid.length;
        n = grid[0].length;
        boolean[][] book = new boolean[m][n];
        // 将边界上的1加入队列并标记为搜索过
        // 两列
        for (int i = 0; i < m;i++) {
            if (grid[i][0] == 1) {
                q.offer(new int[]{i,0});
                grid[i][0] = 2;
                book[i][0] = true;
            } 
            if (grid[i][n-1] == 1) {
                q.offer(new int[]{i,n-1});
                book[i][n-1] = true;
                grid[i][n-1] = 2;
            }
        }
        // 两行
        for (int j = 0; j < n;j++) {
            if (grid[0][j] == 1) {
                q.offer(new int[]{0,j});
                grid[0][j] = 2;
                book[0][j] = true;
            }
            if (grid[m-1][j] == 1) {
                q.offer(new int[]{m-1,j});
                grid[m-1][j] = 2;
                book[m-1][j] = true;
            }
        }
        // 多源BFS
        while (!q.isEmpty()) {
            int[] t = q.poll();
            int a = t[0];
            int b = t[1];
            for (int i = 0; i < 4;i++) {
                int x = a + flag[i][0];
                int y = b + flag[i][1];
                if (x>=0&&x<m&&y>=0&&y<n&&grid[x][y]==1) {
                    q.offer(new int[]{x,y});
                    book[x][y] = true;
                    grid[x][y] = 2;
                }
            }
        }
        int ret = 0;
        for (int i = 0; i < m;i++) {
            for (int j = 0; j < n;j++) {
                if (grid[i][j] == 1) ret++;
            }
        }
        return ret;
    }
}
