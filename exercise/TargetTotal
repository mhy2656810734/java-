class TargetTotal {
    public int findTargetSumWays(int[] nums, int target) {
        // 分析题意:
        // 数组总和是sum,题目要求是将元素分成正数和负数两堆,然后求和 = target
        // 那么(正数总和)a + b(负数总和的绝对值) = sum
        // 并且 a - b = target
        // 将上面两个式子相加得到: a = (sum+tager) /2
        // 因此，讲这道题转换成:在数组中找到和为 (sum+targer)/2 的不同选法  (01背包问题)
        // 1.状态表示
        // dp[i][j]表示:从前i个数中选，总和等于j，一共有多少种选法
        // 2.状态转移方程
        // 根据最后一个位置选或者不选划分问题
        // 2.1如果最后一个位置不选
        // dp[i][j] = dp[i-1][j]
        // 2.2如果最后一个位置选
        // dp[i][j] = dp[i-1][j-nums[i]](这里不用+1，因为是dp[i][j]是选法); 前提是 j >= nums[i]
        // 3.初始化
        // 状态转移方程出现了i-1 和 j-nums[i]
        // 需要注意第一行是不是越界 多开一行即可
        // 由于 j-nums[i] 会进行判定，这个结果最差是0,并不会越界，多开一列不用初始化
        // 初始化第一行
        // dp[0][0] = 1  dp[0][j] = 0 (第一行表示0个元素，不能求和为j,没有选法)
        // 4.填表顺序
        // 从状态转移方程来看，dp[i][j] 依赖于dp[i-1][j] 因此，从上往下，从左往右填
        // 5.返回值
        // dp[n][(sum+target)/2]

        // 创建dp表
        int n = nums.length;
        int sum = 0;
        for (int x:nums) {
            sum += x;
        }
        int m = (sum+target) /2;
        // 处理边界情况
        // 如果m是负数，不满足题意，如果target+sum 是奇数，也不满足条件
        if(m < 0 || (target + sum) %2 == 1) {
            return 0;
        }
        int[][] dp = new int[n+1][m+1];
        // 初始化
        dp[0][0] = 1;
        // 填表
        for (int i = 1; i <= n;i++) {
            // 这里的j从0开始，不用初始化
            for (int j = 0; j <= m;j++) {
                // 先等于不选i位置元素
                dp[i][j] = dp[i-1][j];
                // 然后根据判断条件来加另一种选法(选i位置元素)
                if (j >= nums[i-1]) {
                    dp[i][j] += dp[i-1][j-nums[i-1]];
                }
            }
        }
        return dp[n][m];
    }
}
