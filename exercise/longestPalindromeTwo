class Solution {
    public String longestPalindrome(String s) {
       // 解法一：动态规划
    //    String str = "";
    //    int ret = 0;// 
    //    int n = s.length();
    //    boolean[][] dp = new boolean[n][n];
    //    for (int i = n-1; i >= 0;i--) {
    //        for (int j = i; j < n;j++) {
    //            if (s.charAt(i) == s.charAt(j)) {
    //                if (i == j || i + 1 == j) {
    //                    dp[i][j] = true;
    //                } else {
    //                    dp[i][j] = dp[i+1][j-1];
    //                }
    //            }
    //            if (dp[i][j]) {
    //                if (ret < j - i + 1) {
    //                    ret = j - i + 1;
    //                    str = s.substring(i,j+1);
    //                }
    //            }
    //        }
    //    }
    //    return str;
       // 解法二：中心扩展算法
           int n = s.length();
           // 最终回文串的起始位置以及长度
           int begin = 0,len = 0;
           // 固定所有的中间点
           for (int i = 0; i < n;i++) {
               // 1.先扩展奇数长度的子串
               int left = i;
               int right = i;
               while ((left >= 0 && right < n) && (s.charAt(left) == s.charAt(right))) {
                   left--;
                   right++;
               }
               // 此时left和right中间就是回文子串
               if (right - left - 1 > len) {
                   begin = left+1;
                   len = right - left - 1;
               }
               // 2.再扩展偶数长度的子串
               left = i;
               right = i+1;
               while ((left >= 0 && right < n) && (s.charAt(left) == s.charAt(right))) {
                   left--;
                   right++;
               }
               // 此时left和right中间就是回文子串
               if (right - left - 1 > len) {
                   begin = left+1;
                   len = right - left - 1;
               }
        }
        return s.substring(begin,begin + len);
    }
}
