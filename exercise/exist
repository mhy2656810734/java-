class Solution {
    public int[][] flag = {{0,-1},{0,1},{-1,0},{1,0}};
    public char[] word;
    public boolean[][] check;
    public int n,m;
    public boolean exist(char[][] board, String words) {
        word = words.toCharArray();
        n = board.length;
        m = board[0].length;
        check = new boolean[n][m];
        for (int i = 0; i < n;i++) {
            for (int j = 0; j < m;j++) {
                if (board[i][j] == word[0]) {
                    check[i][j] = true;
                    if (dfs(board,i,j,1)) return true;
                    check[i][j] = false;
                }
            }
        }
        return false;
    }
    public boolean dfs(char[][] board,int i,int j,int pos) {
        if (pos == word.length) {
            return true;
        }
        for (int k = 0; k < 4;k++) {
            int x = flag[k][0] + i;
            int y = flag[k][1] + j;
            if (x >= 0 && x < n && y >= 0 && y < m && 
            board[x][y] == word[pos] && !check[x][y]) {
                check[x][y] = true;
                if (dfs(board,x,y,pos+1)) return true;
                check[x][y] = false;
            }
        }
        return false;
    }
}
