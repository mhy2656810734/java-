class Solution {
    public int maxTurbulenceSize(int[] arr) {
        // 1.状态表示
        // dp[i] 表示以i位置结尾的所有子数组中湍流子数组的长度
        // 2.状态转移方程
        // 根据最后一个位置和前一个位置能不能构成湍流子数组划分问题
        // 2.1如果可以构成湍流子数组
        // 2.2如果不能构成湍流子数组
        // 由于不知道前一个位置的装状态，因此无法推导状态转移方程
        // 因此，重新构造状态表示
        // 1.状态表示
        // f[i] 表示以i位置结尾最后成递减状态的所有子数组中湍流子数组的长度
        // g[i] 表示以i位置结尾最后成递增状态的所有子数组中湍流子数组的长度
        // 2.状态转移方程
        // 最后一个位置i和前一个位置i-1大小关系划分情况
        // 如果 nums[i] > nums[i - 1]  f[i] = g[i - 1] + 1
        // 如果 nums[i] < nums[i - 1]  g[i] = f[i - 1] + 1
        // 两种情况求最大值
        // 3.初始化
        // 出现了i-1 考虑第一个位置是否越界
        // 两张表全部初始化为1即可
        // 4.填表顺序
        // 从左到右 两张表一起填
        // 5.返回值
        // 返回两张表的最大值

        int n = arr.length;
        int[] f = new int[n];
        int[] g = new int[n];
        Arrays.fill(f,1);
        Arrays.fill(g,1);
        int fMax = 1;
        int gMax = 1;
        for (int i = 1; i < n;i++) {
            if (arr[i] > arr[i-1]) {
                f[i] = g[i-1] + 1;
            } else if (arr[i] < arr[i-1]){
                g[i] = f[i-1] + 1;
            }
            fMax = Math.max(fMax,f[i]);
            gMax = Math.max(gMax,g[i]);
        } 
        return fMax > gMax ? fMax:gMax;
    }
}
