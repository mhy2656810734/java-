class Solution {
    int n,m;
    public int[][] flag = {{1,0},{0,1},{-1,0},{0,-1}};
    public int cutOffTree(List<List<Integer>> f) {
        // 解题思路：N个迷宫问题，求最短路径
        // 先确定砍树的顺序，存每个数据的下标（根据值进行排序）
        // 开始砍树
        // 1.确定砍树的顺序
        List<int[]> trees = new ArrayList<>();
        n = f.size();m = f.get(0).size();
        for (int i = 0; i < n;i++) {
            for (int j = 0; j < m;j++) {
                if (f.get(i).get(j) > 1) {
                    trees.add(new int[]{i,j});
                }
            }
        }
        // 根据值进行排序
        Collections.sort(trees,(a,b) ->
        {
            // 从小到大
            return f.get(a[0]).get(a[1]) - f.get(b[0]).get(b[1]); 
        });
        // 2.开始砍树  
        // 从0,0开始
        int bx = 0,by = 0;
        int ret = 0;// 记录最终结果
        for (int[] tree:trees) {
            int x = tree[0];
            int y = tree[1];
            // 求最短路径
            int step = bfs(f,bx,by,x,y);
            // 如果step为-1，说明不能到达该点，说明不能砍完所有的树
            if (step == -1) return -1;
            ret += step;
            // 修改起点，继续找最小的树
            bx = x;by = y;
        }
        return ret;
    }
    public int bfs(List<List<Integer>> f,int bx,int by,int ex,int ey) {
        if (bx == ex && ey == by) return 0;
        Queue<int[]> q = new LinkedList<>();
        boolean[][] book = new boolean[n][m];
        q.offer(new int[]{bx,by});
        book[bx][by] = true;
        int step = 0;
        while (!q.isEmpty()) {
            step++;
            int sz = q.size();
            while (sz-- != 0) {
                int[] t = q.poll();
                int a = t[0];
                int b = t[1];
                for (int k = 0; k < 4;k++) {
                    int x = a + flag[k][0];
                    int y = b + flag[k][1];
                    if (x >= 0 && x < n && y >= 0 && y < m && 
                    f.get(x).get(y) != 0 && !book[x][y]) {
                        // 判断是不是到达了终点
                        if (x == ex && y == ey) return step;
                        q.offer(new int[]{x,y});
                        book[x][y] = true;
                    }
                }
            }
        }
        return -1;
    }
}
