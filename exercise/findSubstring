class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        // 可以将题目转化成找到“找到字符串中所有字母异位词”这道题
        // 将words里面的每个字符串都看做一个字符，然后从s字符串中找到这些字母异位的词
        // 解题思路：使用滑动窗口
        // 1.初始化
        // 定义left 和 right
        // 每次让 left、right移动words单词的长度len
        // 2.进窗口
        // 使用hash1来统计每个字符串出现的次数
        // 由于不知道words中的单词在s中是如何划分的，所以分情况来讨论，也就是需要执行len次滑动窗口
        // 3.判断/出窗口

        int len = words[0].length();
        int m = words.length;
        Map<String,Integer> hash1 = new HashMap<>();
        for (String str:words) {
            hash1.put(str,hash1.getOrDefault(str,0)+1);
        }
        List<Integer> list = new ArrayList<>();
        // 需要执行len次滑动窗口
        for (int i = 0; i < len;i++) {
             Map<String,Integer> hash2 = new HashMap<>();// 统计窗口中的单词以及单词出现的次数
            // count表示有效字符串的个数
            for (int left = i,right = i,count = 0;right + len <= s.length();right += len) {
                // 进窗口
                String in = s.substring(right,right + len);
                hash2.put(in,hash2.getOrDefault(in,0) + 1);
                // 如果进入窗口的是个有效字符串
                if (hash2.get(in) <= hash1.getOrDefault(in,0)) {
                    count++;
                }
                // 判断并维护窗口
                if (right - left + 1 > len * m) {
                    String out = s.substring(left,left + len);
                    // 如果出窗口的是有效字符串
                    if (hash2.get(out) <= hash1.getOrDefault(out,0)) {
                        count--;
                    }
                    hash2.put(out,hash2.get(out) - 1);
                    left += len;
                }
                // 更新数据
                if (count == m) {
                    list.add(left);
                }
            }
        }
        return list;
    }
}
