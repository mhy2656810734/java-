class Solution {
    public int findKthLargest(int[] nums, int k) {
        // 解题思路: 使用数组分三块+随机选择基准元素+快排
        // 还是将数组分成三块
        // 根据每一块的元素的个数考虑最终的返回值
        // 第一段元素个数 a 第二段 b 第三段c
        // 如果c >= k 说明第k大的在 第三个区间
        // 如果 b+c >=k  说明第k大的就是key
        // 上述两种情况都不符合，则第k大的元素就在第一个区间
        return qSort(nums,0,nums.length-1,k);
    }
    public int qSort(int[] nums,int l,int r,int k) {
        if (l == r) return nums[l];
        // 1.选择随机基准元素
        int key = nums[new Random().nextInt(r-l+1)+l];
        int i = l,left = l-1,right = r+1;
        while (i < right) {
            if (nums[i] < key) {
                swap(nums,++left,i++);
            } else if (nums[i] == key) {
                i++;
            } else {
                swap(nums,--right,i);
            }
        }
        // 三个区间[l,left] [left+1,right-1] [right,r]
        int c = r-right+1,b = right-left-1;
        if (c >= k) return qSort(nums,right,r,k);
        else if (b+c >= k) return key;
        else return qSort(nums,l,left,k-b-c);
    }
    public void swap(int[] nums,int left,int right) {
        int t = nums[left];
        nums[left] = nums[right];
        nums[right] = t;
    }
}
