import java.util.Stack;

/**
 * 单向不循环链表
 * @author 26568
 * @date 2022-09-16 11:19
 */
public class LinkedList1 {
    static class ListNode {
        public int val;// 数据域
        public ListNode next;// 指针域
        // 构造方法
        public ListNode(int val) {
            this.val = val;
        }
    }
    // 头结点
    public ListNode head;// 默认为null
    // 打印单链表
    public void display() {
        if (this.head == null) {
            System.out.println("链表为空，无法打印");
            return;
        }
        ListNode cur = this.head;
        while (cur != null) {
            System.out.print(cur.val+" ");
            cur = cur.next;
        }
        System.out.println();
    }
    // 递归逆序单链表
    public void display1(ListNode head) {
        if (head != null) {
            display1(head.next);
            System.out.print(head.val+" ");
        }
    }
    // 利用栈逆序打印链表
    public void display2() {
        ListNode cu = this.head;
        Stack<ListNode> stack = new Stack<>();
        while (cu != null) {
            stack.push(cu);
            cu = cu.next;
        }
        // 开始取数据打印
        while (!stack.empty()) {
            ListNode cur = stack.pop();
            System.out.print(cur.val+" ");
        }
    }
    // 头插法
    public void addFirst(int val) {
        ListNode listNode = new ListNode(val);
        // 最好每次先连接后面的结点
        listNode.next = this.head;
        this.head = listNode;
    }
    // 尾插法
    public void addLast(int val) {
        ListNode node = new ListNode(val);
        // 首先判断链表是否为空
        if (this.head == null) {
            this.head = node;
            return;
        }
        // 正常插入
        ListNode cur = this.head;
        while (cur.next != null) {
            cur = cur.next;
        }
        cur.next = node;
    }
    // 得到单链表的长度
    public int size() {
        int count = 0;
        ListNode cur = this.head;
        while (cur != null) {
            count++;
            cur = cur.next;
        }
        return count;
    }
    // 查找是否包含关键字key的节点在链表中
    public boolean containsKey(int key) {
        ListNode cur = this.head;
        while (cur != null) {
            if (cur.val == key) {
                return true;
            }
            cur = cur.next;
        }
        return false;
    }
    // 在任意位置插入，第一个节点为0下标
    public void addIndex(int index, int val) throws IndexWrongException{
        if (this.head == null) {
            System.out.println("单链表为空，插入失败");
            return;
        }
        // 判断index位置的合法性
        if (index < 0 || index > size()) {
            System.out.println("index位置不合法");
            throw new IndexWrongException("index位置不合法");
        }
        // 头插
        if (index == 0) {
            addFirst(val);
            return;
        }
        // 尾插
        if (index == size()) {
            addLast(val);
            return;
        }
        // 正常插入，先找要插入下标的前一个节点
        ListNode prev = search(index);
        ListNode node = new ListNode(val);
        node.next = prev.next;
        prev.next = node;
    }
    // 查找要插入下标的前一个节点
    public ListNode search(int index) {
        ListNode cur = this.head;
        while (index - 1 > 0) {
            cur = cur.next;
            index--;
        }
        return cur;
    }
    // 删除第一次出现key值的节点
    public void remove(int key) {
        // 判断单链表是否为空
        if (this.head == null) {
            System.out.println("单链表为空,无法删除");
            return;
        }
        // 如果要删除结点是头结点
        if (this.head.val == key) {
            this.head = this.head.next;
            return;
        }
        // 先查找要删除结点的前一个节点
        ListNode pre = removePrev(key);
        if (pre == null) {
            System.out.println("没有你要删除的节点");
            return;
        }
        pre.next = pre.next.next;
    }
    // 先查找要删除结点的前一个节点
    private ListNode removePrev(int key) {
        ListNode cur = this.head;
        while (cur.next != null) {
            if (cur.next.val == key) {
                return cur;
            }
            cur = cur.next;
        }
        // 没找到
        return null;
    }
    // 删除所有值为key的节点  前后指针法
    public void removeAllKey(int key) {
        if (this.head == null) {
            System.out.println("单链表为空");
            return;
        }
        ListNode prev= this.head;
        ListNode cur = prev.next;
        while (cur != null) {
            if (cur.val == key) {
                // 直接跳过cur这个节点
                prev.next = cur.next;
                // cur变化，进行下次操作
                cur = cur.next;
            } else {
                // 如果不是就让prev到cur的位置
                prev = cur;
                cur  = cur.next;
            }
        }
        // 最后处理头结点
        if (this.head.val == key) {
            this.head = this.head.next;
        }
    }
    // 清空单链表
    public void clear() {
        this.head = null;
    }
    public static void main(String[] args) {
        LinkedList1 linkedList = new LinkedList1();
        // 头插法
//        for (int i = 0; i < 5;i++) {
//            linkedList.addFirst(i);
//        }
//        linkedList.display();
        //  尾插法
        for (int i = 0; i < 5;i++) {
            linkedList.addLast(4);
        }
        linkedList.display();
//        System.out.println(linkedList.size());
//        System.out.println(linkedList.containsKey(10));
        // 在下标处插入
        linkedList.addIndex(2,999);
        linkedList.addIndex(3,100);
        linkedList.addIndex(7,999);
//        linkedList.display();
//        linkedList.remove(9);
        linkedList.display();
//       linkedList.removeAllKey(4);
        linkedList.display1(linkedList.head);
//        linkedList.clear();
        linkedList.display2();
    }
}
class IndexWrongException extends RuntimeException{
    public IndexWrongException() {
    }

    public IndexWrongException(String message) {
        super(message);
    }
}
