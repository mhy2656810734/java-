class Solution {
    public int[][] flag = {{0,1},{0,-1},{1,0},{-1,0}};
    public int n,m;
    public boolean[][] book;
    public int maxAreaOfIsland(int[][] grid) {
        // 解题思路：可以使用递归或者BFS
        // BFS解法：
        n = grid.length;
        m = grid[0].length;
        book = new boolean[n][m];
        // 每次遇到1就统计面积，然后记录最大值
        int max = 0;
        for (int i = 0; i < n;i++) {
            for (int j = 0; j < m;j++)  {
                if (grid[i][j] == 1 && !book[i][j]) {
                    max = Math.max(max,BFS(grid,i,j));
                }
            }
        }
        return max;
    }
    public int BFS(int[][] grid,int i,int j) {
        int ret = 1;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{i,j});
        book[i][j] = true;
        while (!queue.isEmpty()) {
            int[] t = queue.poll();
            int a = t[0];
            int b = t[1];
            // 遍历四个方向
            for (int k = 0; k < 4;k++) {
                int x = a + flag[k][0];
                int y = b + flag[k][1];
                if (x >= 0 && x < n && y >= 0 && y < m && 
                grid[x][y] == 1 && !book[x][y]) {
                    queue.offer(new int[]{x,y});
                    ret++;
                    book[x][y] = true;
                } 
            }
        }
        return ret;
    }
}
