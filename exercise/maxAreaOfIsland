class Solution {
    public int[][] flag = {{1,0},{-1,0},{0,-1},{0,1}};
    public boolean[][] book;
    public int n,m,ret;
    public int maxAreaOfIsland(int[][] grid) {
        n = grid.length;
        m = grid[0].length;
        book = new boolean[n][m];
        int count = 0;
        for (int i = 0; i < n;i++) {
            for (int j = 0;j < m;j++) {
                if (grid[i][j] == 1 && !book[i][j]) {
                    ret = 0;
                    dfs(grid,i,j);
                    count = Math.max(ret,count);
                }
            }
        }
        return count;
    }
    public void dfs(int[][] grid,int x,int y) {
        ret++;
        book[x][y] = true;

        for (int i = 0; i < 4;i++) {
            int newX = x + flag[i][0];
            int newY = y + flag[i][1];
            if (newX >= 0 && newX < n && newY >= 0 && newY < m &&
             grid[newX][newY] == 1 && !book[newX][newY]) {
                dfs(grid,newX,newY);
            }
        }
    }
} 
