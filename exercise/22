class Solution {
    public int[] smallestK(int[] arr, int k) {
        if (arr == null || k == 0) {
            return new int[0];
        }
         PriorityQueue<Integer> maxHeap = new PriorityQueue<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2.compareTo(o1);
            }
        });
         for (int i = 0; i < k;i++) {
             maxHeap.offer(arr[i]);
         }
         for (int i = k;i < arr.length;i++) {
             int top = maxHeap.peek();
             if (arr[i] < top) {
                 maxHeap.poll();
                 maxHeap.offer(arr[i]);
             }
         }
         int[] num = new int[k];
         for (int i = 0; i < k;i++) {
             num[i] = maxHeap.poll();
         }
         return num;
    }
}
