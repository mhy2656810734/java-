import java.util.*;

public class Es {
    // 时间复杂度：O（n^2）  空间复杂度：O（1） 稳定
    public static void main(String[] args) {
        int[] arr = {5, 9, 10, 7, 3, 2, 0, 20, 14, 31};
        //insertSort(arr);
        //noMergeSort(arr);
        noQuickSort(arr);
        System.out.println(Arrays.toString(arr));
        //textInsertSort();
        //textMergeSort();
    }
    // 插入排序：时间复杂度：O（n^2） 空间复杂度：o(1) 稳定性:稳定
    public static void insertSort(int[] arr) {
        for (int i = 1; i < arr.length;i++) {
            int j = i - 1;
            int temp = arr[i];
            for (;j >= 0;j--) {
                if (arr[j] > temp) {
                    arr[j+1] = arr[j];
                } else {
                    break;
                }
            }
            arr[j+1] = temp;
        }
    }
    public static void textInsertSort () {
        int[] arr = new int[100000];
        Random random = new Random();
        for (int i = 0; i < arr.length; i++) {
            arr[i] = random.nextInt(100000);
        }
        long start = System.currentTimeMillis();
        insertSort(arr);
        long end = System.currentTimeMillis();
        System.out.println("插入排序耗时:" + (end - start));
    }
    // 归并排序
    // 时间复杂度o(n*logn)  空间复杂度:O(n)  稳定性：不稳定
    public static void mergeSort(int[] arr) {
        mergeSort(arr,0,arr.length -1);
    }
    public static void mergeSort(int[] arr,int left,int right) {
        if (left == right) {
            return;
        }
        int mid = (left +right)/2;
        mergeSort(arr,left,mid);
        mergeSort(arr,mid+1,right);
        // 归并
        merge(arr,left,mid,right);
    }
    public static void merge(int[] arr,int left,int mid,int right) {
        int s1 = left;
        int e1 = mid;
        int s2 = mid+1;
        int e2 = right;
        int k = 0;
        int[] temp = new int[right - left+1];
        while ((s1 <= e1) && (s2 <= e2)) {
            if (arr[s1] <= arr[s2]) {
                temp[k++] = arr[s1++];
            } else {
                temp[k++] = arr[s2++];
            }
        }
        while (s1 <= e1) {
            temp[k++] = arr[s1++];
        }
        while (s2 <= e2) {
            temp[k++] = arr[s2++];
        }
        for (int i = 0; i < temp.length;i++) {
            arr[i+left] = temp[i];
        }
    }
    public static void textMergeSort() {
        int[] arr = new int[100000];
        Random random = new Random();
        for (int i = 0; i < arr.length; i++) {
            arr[i] = random.nextInt(100000);
        }
        long start = System.currentTimeMillis();
        mergeSort(arr);
        long end = System.currentTimeMillis();
        System.out.println("归并排序耗时:" + (end - start));
    }
    // 归并排序非递归实现
    public static void noMergeSort(int[] arr) {
        int gap = 1;
        while (gap < arr.length) {
            for (int i = 0; i < arr.length;i += 2*gap) {
                int left = i;
                int mid = i + gap-1;
                int right =  mid + gap;
                // 避免越界
                if (mid >= arr.length) {
                    mid = arr.length-1;
                }
                if (right >= arr.length) {
                    right = arr.length -1;
                }
                merge(arr,left,mid,right);
            }
            gap *= 2;
        }
    }
    // 快速排序
    // 时间复杂度: O(N * logn) 空间复杂度:O(logn) 稳定性:不稳定
    public static void quickSort(int[] arr) {
        quickSort(arr,0,arr.length -1);
    }
    public static void quickSort(int[] arr,int left,int right) {
        if (left > right) {
            return;
        }
        int pivot = quick3(arr,left,right);
        quickSort(arr,left,pivot -1);
        quickSort(arr,pivot+1,right);
    }
    public static int quick(int[] arr,int left,int right) {
        int pivot = arr[left];
        int i = left;
        while (left < right) {
            while (left < right && arr[left] <= pivot) {
                left++;
            }
            while (left < right && arr[right] >= pivot) {
                right--;
            }
            // 开始交换、
            int temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;
        }
        int temp = arr[left];
        arr[left] = arr[i];
        arr[i] = temp;
        return left;

    }
    // 挖坑法
    public static int quick2(int[] arr,int left,int right) {
        int pivot = arr[left];
        int i = left;
        while (left < right) {
            while (left < right && arr[right] >= pivot) {
                right--;
            }
            arr[left] = arr[right];
            while (left < right && arr[left] <= pivot) {
                left++;
            }
            arr[right] = arr[left];
        }
        arr[left] = pivot;
        return i;
    }
    // 前后指针法
    public static int quick3(int[] arr,int left,int right) {
        int prev = left;
        int cur = left +1;
        while (cur <= right ) {
            if (arr[cur] < arr[left] &&arr[++prev] != arr[cur]) {
                // 交换
                int temp = arr[cur];
                arr[cur] = arr[prev];
                arr[prev] = temp;
            }
            cur++;
        }
        int temp = arr[left];
        arr[left] = arr[prev];
        arr[prev] = temp;
        return prev;
    }
    // 快排非递归实现
    public static void noQuickSort(int[] arr) {
        Stack<Integer> stack = new Stack<>();
        int left = 0;
        int right = arr.length -1;
        int pivot = quick2(arr,left,right);
        // 判左1
        if (left < pivot -1) {
            stack.push(left);
            stack.push(pivot -1);
        }
        if (pivot < right -1) {
            stack.push(pivot+1);
            stack.push(right);
        }
        while (!stack.isEmpty()) {
            right = stack.pop();
            left = stack.pop();
            pivot = quick2(arr,left,right);
            // 判左1
            if (left < pivot -1) {
                stack.push(left);
                stack.push(pivot -1);
            }
            if (pivot < right -1) {
                stack.push(pivot+1);
                stack.push(right);
            }
        }
    }
}
