class All {
    List<List<Integer>> retList;
    List<Integer> path;
    boolean[] book;
    public List<List<Integer>> permute(int[] nums) {
        // 解题思路：使用递归（1.先想办法画决策树  2.设计代码）
        // 遇到递归记得想恢复现场的问题
        // 1.全局变量有三个：最终返回集合retList 记录所有路径的path  标记原数组的每个下标是否为访问过 book
        // 因为要向下递归,原数组原来位置的元素不能再拼接了，需要book标记原来位置已经被使用过了
        // 当递归返回来的时候，再将这个位置修改为未使用过
        // 2.dfs函数  关心某一个子问题(节点)做的工作
        //   函数的出口，当节点为空，也就是遍历到最后一个节点（数组元素）的时候，将path加入retList返回即可
        // 由于是数组，因此出口就是 当nums.length == path.size()
        retList = new ArrayList<>();
        path = new ArrayList<>();
        book = new boolean[nums.length];
        dfs(nums);
        return retList;
    }
    public void dfs(int[] nums) {
        if (nums.length == path.size()) {
            retList.add(new ArrayList<>(path));
            return;
        }
        // 遍历数组
        for (int i = 0;i < nums.length;i++) {
            // 保证当前元素没有被访问过
            if (book[i] == false) {
                // 然后将当前值加入path
                path.add(nums[i]);
                // 标记为访问过
                book[i] = true;
                // 继续向后递归
                dfs(nums);
                //回溯 恢复现场操作 2步操作
                // i 标记为没有访问过
                book[i] = false;
                // 删除最后一个元素
                path.remove(path.size() -1);
            }
        }
    }
}
