class Solution {
    public int m,n;
    public int[][] flag = {{1,0},{0,1},{-1,0},{0,-1}};
    public int[][] highestPeak(int[][] isWater) {
        // 解题思路：多源BFS
        // 创建一个数组，先将原来1的位置修改为0
        // 然后将这些下标加入队列，来一次多源BFS即可
        m = isWater.length;n = isWater[0].length;
        int[][] dist = new int[m][n];
        boolean[][] book = new boolean[m][n];
        Queue<int[]> q = new LinkedList<>();
        for(int i = 0; i <m;i++) {
            for (int j = 0; j < n;j++) {
                if (isWater[i][j] == 1) {
                    book[i][j] = true;
                    q.offer(new int[]{i,j});
                }
            }
        }
        // 2.取出所有源点开始扩展
        while (!q.isEmpty()) {
            int[] t = q.poll();
            int a = t[0];
            int b = t[1];
            for (int i = 0; i < 4;i++) {
                int x = a + flag[i][0];
                int y = b + flag[i][1];
                if (x >= 0 && x < m &&y>= 0&& y<n &&!book[x][y]) {
                    dist[x][y] = dist[a][b] + 1;
                    q.offer(new int[]{x,y});
                    book[x][y] = true;
                }
            }
        }
        return dist;
    }
}
