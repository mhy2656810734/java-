/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        // 解题思路：使用队列层序遍历+标记位
        boolean flag = false;
        List<List<Integer>> list = new ArrayList<>();
        if (root == null) return list;
        // 用来存储节点
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            // 记录当前栈中有多少个节点
            int sz = queue.size();
            List<Integer> tmp = new ArrayList<>();
            while (sz-- > 0) {
                TreeNode cur = queue.poll();
                tmp.add(cur.val);
                if (cur.left != null) queue.offer(cur.left);
                if (cur.right != null) queue.offer(cur.right);
            }
            // 此时判断是不是要逆序
            if (flag) {
                List<Integer> midList = new ArrayList<>();
                for (int i = tmp.size() - 1;i >= 0;i--) {
                    midList.add(tmp.get(i));
                }
                tmp = midList;
                flag = false;
            } else {
                flag = true;
            }
            list.add(tmp);
        }
        return list;
    }
}
