class Solution {
    public List<List<Integer>> retList;
    public List<Integer> path;
    public int aim;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        retList = new ArrayList<>();
        path = new ArrayList<>();
        aim = target;
        dfs(candidates,0,0);
        return retList;
    }
    public void dfs(int[] nums,int pos,int sum) {
        if (sum >= aim || pos == nums.length) {
            if (sum == aim) {
                retList.add(new ArrayList<>(path));
            }
            return;
        }
        for (int i = pos;i < nums.length;i++) {
            path.add(nums[i]);
            dfs(nums,i,sum + nums[i]);
            path.remove(path.size() - 1);
        }
    }
}
