import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Random;

public class Exercise {
    // 时间复杂度：O（n^2）  空间复杂度：O（1） 稳定
    public static void main(String[] args) {
        int[] arr = {5,9,10,7,3,2,0,20,14,31};
        //bubbleSort(arr);
        //countSort(arr);
        heapSort(arr);
        System.out.println(Arrays.toString(arr));
       // textBubbleSort();
       // textCountSort();
        textHeapSort();
    }
    public static void bubbleSort(int[] arr) {
        for (int i = 0;i < arr.length -1;i++) {
            boolean flag = true;
            for (int j = 0; j < arr.length -1-i;j++) {
                if (arr[j] > arr[j+1]) {
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                    flag = false;
                }
            }
            if (flag == true) {
                break;
            }
        }
    }
    public static  void textBubbleSort() {
        int[] arr = new int[100000];
        Random random = new Random();
        for (int i = 0;i < arr.length;i++) {
            arr[i] = random.nextInt(100000);
        }
        long start = System.currentTimeMillis();
        bubbleSort(arr);
        long end = System.currentTimeMillis();
        System.out.println("冒泡排序耗时:"+(end - start));
    }
    // 计数排序
    // 时间复杂度:O(n+范围) 空间复杂度:O（范围） 稳定
    public static  void countSort(int[] arr) {
        // 得到最大最小值
        int max = arr[0];
        int min = arr[0];
        for (int i = 1; i < arr.length;i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
            if (arr[i] < min) {
                min = arr[i];
            }
        }
        // 根据最大最小值创建数组
        int len = max - min+1;
        int[] tempArr = new int[len];
        // 将数组数据放入创建数组
        for (int i = 0;i < arr.length;i++) {
            int val = arr[i];
            tempArr[val - min]++;
        }
        // 放回原数组
        int k = 0;
        for (int i = 0; i < tempArr.length;i++) {
            int count = tempArr[i];
            while (count > 0) {
                arr[k++] = i+min;
                count--;
            }

        }
    }
    public static void textCountSort() {
        int[] arr = new int[100000];
        Random random = new Random();
        for (int i = 0;i < arr.length;i++) {
            arr[i] = random.nextInt(100000);
        }
        long start = System.currentTimeMillis();
        countSort(arr);
        long end = System.currentTimeMillis();
        System.out.println("计数排序耗时:"+(end - start));
    }
    // 堆排序
    // 时间复杂度; O(N*logn) 空间复杂度;O（1） 不稳定
    public static void createBigHeap(int[] arr) {
        for (int parent = (arr.length -1 - 1)/2;parent>=0;parent--) {
            // 向下调整
            shiftDown(arr,parent,arr.length);
        }
    }
    public static void shiftDown(int[]arr,int parent,int len) {
        int child = 2*parent+1;
        while (child < len) {
            if (child+1 < len && (arr[child] < arr[child+1])) {
                child++;
            }
            if (arr[child] > arr[parent]) {
                int temp = arr[child];
                arr[child] = arr[parent];
                arr[parent] = temp;
                parent = child;
                child = 2*parent+1;
            } else {
                break;
            }
        }
    }
    public static void heapSort(int[] arr) {
        createBigHeap(arr);
        int end = arr.length -1;
        while (end > 0) {
            int temp = arr[0];
            arr[0] = arr[end];
            arr[end] = temp;
            // 向下调整
            shiftDown(arr,0,end);
            end--;
        }
    }
    public static void textHeapSort() {
        int[] arr = new int[100000];
        Random random = new Random();
        for (int i = 0;i < arr.length;i++) {
            arr[i] = random.nextInt(100000);
        }
        long start = System.currentTimeMillis();
        heapSort(arr);
        long end = System.currentTimeMillis();
        System.out.println("堆排序耗时:"+(end - start));
    }
}
