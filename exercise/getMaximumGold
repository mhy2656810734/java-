class Solution {
    public int[][] flag = {{0,-1},{0,1},{-1,0},{1,0}};
    public int n,m;
    public boolean[][] book;
    public int max;
    public int getMaximumGold(int[][] grid) {
        n = grid.length;
        m = grid[0].length;
        book = new boolean[n][m];
        for (int i = 0; i < n;i++) {
            for (int j = 0; j < m;j++) {
                if (grid[i][j] != '0') {
                    book[i][j] = true;
                    dfs(grid,i,j,grid[i][j]);
                    book[i][j] = false;
                }
            }
        }
        return max;
    }
    public int dfs(int[][] grid,int row,int col,int path) {
        max = Math.max(max,path);
        for (int i = 0; i < 4;i++) {
            int x = flag[i][0] + row;
            int y = flag[i][1] + col;
            if (x >= 0 && x < n && y >= 0 && y < m && grid[x][y] != 0 && !book[x][y]) {
                book[x][y] = true;
                dfs(grid,x,y,path+grid[x][y]);
                book[x][y] = false;
            }
        }  
        return max;
    }
}
