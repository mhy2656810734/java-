class Solution {
    public boolean isMatch(String s, String p) {
        // 1.状态表示
        // dp[i][j]表示p字符串[0,j]区间内的子串能否匹配s字符串[0,i]区间的子串
        // 2.状态转移方程
        // 根据p字符串的最后一个位置分情况讨论
        // 2.1如果p[j]是普通字符 dp[i][j] = (p[j] == s[i] && dp[i-1][j-1] 为true)
        // 2.2如果p[j]是？      dp[i][j] = dp[i-1][j-1] 让？去掉s[i]字符
        // 2.3如果p[j]是*       此时要分情况
        //    如果p[j]匹配空串（舍弃这个*） dp[i][j] = dp[i][j-1]
        //    如果p[j]匹配一个字符         dp[i][j] = dp[i-1][j-1]
        //    如果p[j]匹配两个字符         dp[i][j] = dp[i-2][j-1]
        //    ..........
        //    对于p[j]匹配字符这种情况，我们可以推导一下
        //    假设p[j]每次匹配一个字符，但是不舍弃p[j]，此时就可以对应*匹配多个字符
        //    此时                       dp[i][j] = dp[i-1][j]
        //    综上，如果p[j]是 *
        //    dp[i][j] = dp[i][j-1] || dp[i-1][j]
        // 3.初始化
        // 状态转移方程出现了 i-1 和 j-1,要考虑第一行和第一列避免越界，多加一行和一列
        // 针对第一行初始化 dp[0][j] 表示s字符串是空串，那么此时就要考虑p字符串了
        // 如果p是**a**  那么前两个*的位置都是true，从a开始都是false
        // 针对第一列初始化 dp[i][0] 表示p字符串是空串，则无法匹配 都是false
        // 4.填表顺序
        // dp[i][j] 依赖dp[i-1][j-1] dp[i][j-1],dp[i-1][j] 因此从上到下，从左到右
        // 5.返回值
        // dp[m][n]

        // 创建dp表
        int m = s.length();
        int n = p.length();
        boolean[][] dp = new boolean[m+1][n+1];
        s = " "+s;
        p = " "+p;
        // 初始化
        dp[0][0] = true;
        // 根据p来初始化第一行
        for (int j = 1; j <= n;j++) {
            if (p.charAt(j) == '*') {
                dp[0][j] = true;
            } else {
                break;
            }
        }
        // 填表
        for (int i = 1; i <= m;i++) {
            for (int j = 1; j <= n;j++) {
                // 根据p[j] 来分情况
                if (p.charAt(j) == '?') {
                    // 匹配一个字符
                    dp[i][j] = dp[i-1][j-1];
                } else if (p.charAt(j) == '*') {
                    // 两种情况有一个为真即可
                    // p[j] 匹配空串或者p[j]匹配多个字符
                    dp[i][j] = dp[i][j-1] || dp[i-1][j];
                } else {
                    // p[j] 是普通字符
                    // 必须保证p[j] == s[j] 
                    if ((p.charAt(j) == s.charAt(i)) && (dp[i-1][j-1])) {
                        dp[i][j] = true;
                    }
                }
            }
        }
        return dp[m][n];
    }
}
