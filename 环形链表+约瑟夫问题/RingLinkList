/**
 * @author 26568
 * 环形链表+约瑟夫问题
 * @date 2022-06-16 20:18
 */

/**
 * 环形单向链表
 */
public class RingLinkiList {
    // 头结点
    private Node first = new Node(-1);

    /**
     *  添加结点，构成一个环形链表
     * @param nums 要添加的结点的个数
     */
    public void addNode(int nums) {
        // 先判断nums值的合法性
        if (nums < 1) {
            System.out.println("nums值不合法");
            return;
        }
        // 创建辅助结点，帮助构建单链表
        Node cur = null;
        for (int i = 1; i <= nums; i++) {
            Node node = new Node(i);
            // 判断是不是第一次添加结点
            if (i == 1) {
                this.first = node;
                first.setNext(first); // 让first指向自己
                cur = node;
            } else {
                // 依靠cur来连接
                cur.setNext(node);// cur先指后一个结点
                node.setNext(first);
                cur = node;
            }
        }
    }

    /**
     * 遍历打印单链表
     */
    public void display() {
        if (this.first == null) {
            System.out.println("链表为空");
            return;
        }
        Node cur = this.first;
        while (true) {
            System.out.printf("小孩的编号是%d\n",cur.getNo());
            cur = cur.getNext();
            if (cur == this.first) {
                break;
            }
        }
    }

    /**
     *
     * @param startNo  表示从第几个孩子开始数
     * @param countNo  表示一次数几
     * @param nums     表示共多少个孩子
     */
    public void countNode(int startNo,int countNo,int nums) {
        // 先对数据进行检验
        if (this.first == null || startNo < 1 || startNo > nums) {
            System.out.println("输入数据有误，清新输入");
            return;
        }
        // 创建一个指针，指向链表最后一个结点
        Node  cur = this.first;
        while (cur.getNext() != this.first) {
            cur = cur.getNext();
        }
        // 此时cur已经是最后一个结点，然后让cur和first一起走到starNd-1的位置  ： 从2号开始，向前走一步
        while (startNo -1 > 0) {
            startNo--;
            cur = cur.getNext();
            this.first = this.first.getNext();
        }
        // 开始进行报数
        while (true) {
            // 只剩一个结点时停止循环
            if (cur == this.first) {
                break;
            }
            for (int i = 0; i < countNo-1; i++) {
                cur = cur.getNext();
                this.first = this.first.getNext();
            }
            System.out.printf("出圈的小孩的编号是：%d\n",this.first.getNo());
            // 先让first走到下一个结点处  再让cur指向移动后的first
            this.first = this.first.getNext();
            cur.setNext(this.first);
        }
        System.out.printf("最后留下的小孩的编号是：%d\n",cur.getNo());
    }
}
/**
 * 结点
 */
class Node {
    private int no;// 编号
    private Node next;// 指向下一个结点，默认时null

    public int getNo() {
        return no;
    }

    public void setNo(int no) {
        this.no = no;
    }

    public Node getNext() {
        return next;
    }

    public void setNext(Node next) {
        this.next = next;
    }

    public Node(int no) {
        this.no = no;
    }
}
