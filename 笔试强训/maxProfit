import java.util.*;


public class Solution {
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     * 计算最大收益
     * @param prices int整型一维数组 股票每一天的价格
     * @return int整型
     */
    public int maxProfit (int[] prices) {
        // write code here
        // int n = prices.length;
        // // 0 表示当天不买彩票  1表示当前买彩票
        // // dp[i][0]表示当天不买股票到该天为止的最大收益
        // // dp[i][1]表示当天买股票到该天为止的最大收益
        // int[][] dp = new int[n][2];
        // // 第一天不买股票 总收益为0
        // dp[0][0] = 0;
        // // 第一天买股票，总收益为 -prices[0]
        // dp[0][1] = -prices[0];
        // // 遍历后续每天，状态转移
        // for (int i = 1; i < n;i++) {
        //     // 当天不买股票
        //     // 最大值为 当天卖出了 或者 当天不买利润就是前一天的不买股票的收益
        //     dp[i][0] = Math.max(dp[i-1][0],dp[i - 1][1] +prices[i]);
        //     // 当天买股票
        //     // 最大值为 之前没卖的利润 或者 当天买入减去花费的利润
        //     dp[i][1] = Math.max(dp[i-1][1],dp[i-1][0]-prices[i]);
        // } 
        // // 最后一天不买股票，到这天最大的收入利润
        // return dp[n-1][0];
        
        // 贪心算法
        int profit = 0;
        // 只要第二天比第一天价格高就卖出
        for (int i = 1; i < prices.length;i++) {
            if (prices[i] > prices[i - 1]) {
                profit += prices[i] - prices[i - 1];
            }
        }
        return profit;
    }
}
