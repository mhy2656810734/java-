import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

/**
 * @author 26568
 * @date 2022-06-29 14:45
 */
public class MergeSort {
    public static void main(String[] args) {
        int[] arr = new int[80000];
        for (int i = 0; i < 80000; i++) {
            arr[i] = (int)(Math.random()*80000);
        }
        int[] temp = new int[arr.length];
        Date date1 = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String strDate1 = simpleDateFormat.format(date1);
        System.out.println("排序前的时间："+strDate1);
        Date date2 = new Date();
        String strDate2 = simpleDateFormat.format(date2);
        mergeSort(arr,0,arr.length-1,temp);
        System.out.println("排序后的时间："+strDate2);

    }

    /**
     *  分治方法
     * @param arr  原数组
     * @param left 起始下标
     * @param right 最后的下标
     * @param temp  拷贝数组
     */
    public static void mergeSort(int[] arr,int left,int right,int[] temp) {
        // 判断条件
        if (left < right) {
            int mid = (left + right)>>1;
            // 递归向左分
            mergeSort(arr,left,mid,temp);
            // 向右递归分
            mergeSort(arr,mid+1,right,temp);
            // 已经分好了，然后开始合并
            merge(arr,left,mid,right,temp);
        }
    }
    /**
     * 合并方法
     * @param arr  原数组
     * @param left 左下标
     * @param mid 中间下标
     * @param right 最右边下标
     * @param temp 过渡数组
     */
    public static void merge(int[] arr,int left,int mid,int right,int[] temp) {
        int i = left; // 左边那组的起始下标
        int j = mid+1; // 右边那组的起始下标
        int t = 0; // temp的下标

        // 共三步
        // 一、比较大小拷贝
        while ((i <= mid) && (j <= right)) {
            // 比较大小然后赋值
            if (arr[i] <= arr[j]) {
                temp[t++] = arr[i++];
            } else {
                temp[t++] = arr[j++];
            }
        }
        //二、将没有比完的那个数组继续拷贝
        while (i <= mid) {
            temp[t++] = arr[i++];
        }
        while (j <= right) {
            temp[t++] = arr[j++];
        }
        // 三、拷贝回原数组
        int tempLeft = left;
        t = 0;
        while (tempLeft <= right) {
            arr[tempLeft++] = temp[t++];
        }
    }
}
