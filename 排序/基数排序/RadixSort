import java.util.Arrays;

/**
 * @author 26568
 * @date 2022-06-29 16:40
 */
public class RadixSort {
    public static void main(String[] args) {
        int[] arr = {4,2,3,5,8,1,9,7};
        radixSort(arr);
        System.out.println(Arrays.toString(arr));
    }

    /**
     * 基数排序
     * @param arr 原数组
     */
    public static void radixSort(int[] arr) {
        // 首先我们计算一下需要多少趟，也就是数组中最大那个数字的长度
        int max = arr[0];
        for (int i = 0; i < arr.length;i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        int maxCount = (max+"").length();
        // 创建一个二维数组来计算
        // 行代表多少个桶（其实也就是0-9个数字) 列是每个一位数组拥有多少个数字，万一下标都一样，就是最长
        int[][] bucket = new int[10][arr.length];
        // 我们再创建一个一维数组来统计，每个桶（一维数组）中存放的数组的个数
        int[] bucketElementCounts = new int[10]; // i下标也就是第i个桶  bucketElementCounts[i]  代表i这个桶多少个数据
        // 开始进行排序
        for (int i = 0,n = 1; i < maxCount; i++,n *= 10) {  // i 代表趟数， n 代表每次需要除10的的倍数
            // 开始放数据
            for (int j = 0; j < arr.length; j++) {
                // 拿到每一个位置的数字 (个位->百位->....)
                int digit = arr[j] / n % 10;
                // 然后放到digit所对应的桶里面
                bucket[digit][bucketElementCounts[digit]] = arr[j];
                // 要让记录桶数据个数的一维数组的值变化
                bucketElementCounts[digit]++;
            }
            // 开始取出桶里面的数据，放到原数组中
            int index = 0; // 原数组下标
            for (int k = 0; k < bucketElementCounts.length; k++) {
                // 如果桶里面有数据我们才放回原数组
                if (bucketElementCounts[k] != 0) {
                    // 循环将第k个桶的数据放入原数组
                    for (int z = 0; z < bucketElementCounts[k];z++) {
                        arr[index++] = bucket[k][z];// 放的是第k个桶里面，下标为z的数据
                    }
                }
                // 每趟结束后要让原来存放的这个第k个桶数据个数置为0
                bucketElementCounts[k] = 0;
            }
        }
    }
}
