import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

/**
 * @author 26568
 * @date 2022-06-24 16:38
 */
public class ShellSort {
    public static void main(String[] args) {
        int[] arr = new int[8];
        for (int i = 0; i < 8; i++) {
            arr[i] = (int)(Math.random()*80000);
        }
        Date date1 = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String date1Str = simpleDateFormat.format(date1);
        System.out.println("排序前的时间："+date1Str);
        shellSort1(arr);
        Date date2 = new Date();
        String date2Str = simpleDateFormat.format(date2);
        System.out.println("排序后的时间："+date2Str);
    }

    /**
     * 希尔排序交换法
     * @param arr
     */
    public static void shellSort(int[] arr) {
        // gap 代表组数
        for (int gap = arr.length / 2; gap > 0; gap /= 2 ) {
            // 共gap个组
            for (int i = gap; i < arr.length; i++) {
                // 每次步长gap的数据进行比较
                for (int j = i-gap; j >= 0; j -= gap ) {
                    if (arr[j] > arr[j + gap]) {
                        int temp = arr[j];
                        arr[j] = arr[j+gap];
                        arr[j+gap] = temp;
                    }
                }
            }
        }
    }
    public static void shellSort1(int[] arr) {
        for (int gap = arr.length; gap > 0; gap /= 2)  {
            for (int i = gap; i < arr.length; i++) {
                int j = i;
                int tmp = arr[j];
                if (arr[j] < arr[j - gap]) {
                    // 将每组步长为gap的数据进行比较
                    while (j - gap >= 0 && tmp < arr[j - gap]) {
                        // 将前面大的数据放到后面
                        arr[j] = arr[j - gap];
                        j -= gap;
                    }
                    // 结束循环以后，说明此时j-gap位置的数据比tmp小，就将tmp放到j位置
                    arr[j] = tmp;
                }

            }
        }
    }
}
