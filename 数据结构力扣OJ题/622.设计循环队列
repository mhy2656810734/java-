class MyCircularQueue {
    private int[] elem;
    private int front;// 队头
    private int rear;// 队尾
    public MyCircularQueue(int k) {
        elem = new int[k+1];
    }
    // 插入数据
    public boolean enQueue(int value) {
        // 先判满
        if (isFull()) {
            return false;
        }
        // 没满就放数据
        elem[rear] = value;
        rear = (rear+1)%elem.length;
        return true;
    }
    // 删除队头元素
    public boolean deQueue() {
        if (isEmpty()) {
            return false;
        }
        front = (front+1)%elem.length;
        return true;
    }
    // 队头数据
    public int Front() {
        if (isEmpty()) {
            return -1;
        }
        return elem[front];
    }
    // 队尾数据
    public int Rear() {
        if (isEmpty()) {
            return -1;
        }
        // 要注意rear的位置
        int index = rear == 0? elem.length-1:rear-1;
        return elem[index];
    }
    
    public boolean isEmpty() {
        return rear == front;
    }
    // 判满
    public boolean isFull() {
        if ((rear + 1) % elem.length == front) {
            return true;
        } 
        return false;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
