/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        // 解法一：递归
    //  List<Integer> ret = new ArrayList<>();
    //  if (root == null) {
    //      return ret;
    //  }
    //  // 先遍历左子树集合
    //  List<Integer> leftList = postorderTraversal(root.left);
    //  // 添加
    //  ret.addAll(leftList);
    //  List<Integer> rightList = postorderTraversal(root.right);
    //  ret.addAll(rightList);
    //  ret.add(root.val);
    //  return ret;
    // 解法二：非递归
    TreeNode cur = root;
    List<Integer> list = new ArrayList<>();
    Stack<TreeNode> stack = new Stack<>();
    TreeNode prev = null;
    while (cur != null || !stack.isEmpty()) {
         while (cur != null) {
        stack.push(cur);
        cur = cur.left;
    }
    TreeNode top = stack.peek();
    // 此时需要判断右孩子结点是否为空
    if (top.right == null || top.right == prev) {
        list.add(top.val);
        stack.pop();
        // 用来标记右孩子节点已经访问过
        prev = top;
    } else {
        cur = top.right;
    }
    }
    return list;
    }
  
}
