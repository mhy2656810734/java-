/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int preIndex = 0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return buildTreeChild(preorder,inorder,0,inorder.length-1);
    }
    private TreeNode buildTreeChild(int[] preorder, int[] inorder,int inbegin,int inend) {
        if (inbegin > inend) {
            return null;
        }
        // 创建一个节点
        TreeNode root = new TreeNode(preorder[preIndex]);
        // 查找当前preIndex下标的节点在中序遍历的位置
        int index = find(preorder[preIndex],inorder,inbegin,inend);
        preIndex++;// 指向下一个根节点
        if (index == -1) {
            return null;
        }
        // 递归构建左右子树
        root.left = buildTreeChild(preorder,inorder,inbegin,index-1);
        root.right = buildTreeChild(preorder,inorder,index+1,inend);
        return root;

    }
    private int find(int val,int[] inorder,int inbegin,int inend) {
        for (int i = inbegin; i <= inend;i++) {
            if (val == inorder[i]) {
                return i;
            }
        }
        return -1;
    }

}
