/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        // 解法一：递归
        // List<Integer> ret = new ArrayList<>();
        // if (root == null) {
        //     return ret;
        // }
        //  ret.add(root.val);
        // List<Integer> leftList = preorderTraversal(root.left);
        // ret.addAll(leftList);
        // List<Integer> rightList = preorderTraversal(root.right);
        // ret.addAll(rightList);
        // return ret;
        // 解法二：非递归
        List<Integer> list = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode cur = root;
       while (cur != null || !stack.isEmpty()) {
            while (cur != null) {
            stack.push(cur);
            list.add(cur.val);
            cur = cur.left;
        }
        // 此时弹出栈顶数据
        TreeNode top = stack.pop();
        cur = top.right;
       }
       return list;
    }
}
