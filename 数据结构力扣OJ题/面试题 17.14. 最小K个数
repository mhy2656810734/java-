class Solution {
    // 实现思路：建立大堆，然后每次让k后面的数据和堆顶数据比较，小的话就交换，然后再调整
   public int[] smallestK(int[] arr, int k) {
        if (arr == null || k == 0) {
            return new int[0];
        }
        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(k, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        });
        for(int i = 0; i < k;i++) {
            priorityQueue.offer(arr[i]);
        }
        // 然后从后面开始比较
        for (int i = k;i < arr.length;i++) {
            int val = priorityQueue.peek();
            if (val > arr[i]) {
                // 弹出大的
                priorityQueue.poll();
                // 放进小的
                priorityQueue.offer(arr[i]);
            }
        }
        int[] temp = new int[k];
        for (int i = 0; i < k;i++) {
            temp[i] = priorityQueue.poll();
        }
        return temp;
    }
}
