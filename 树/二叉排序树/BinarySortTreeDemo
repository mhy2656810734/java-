package tree.binarysorttree;

/**
 * @author 26568
 * @date 2022-08-18 14:47
 */
public class BinarySortTreeDemo {
    public static void main(String[] args) {
        int[] arr = {7,3,10,12,5,1,9,2};
        BinarySortTree binarySortTree = new BinarySortTree();
        for (int i = 0; i < arr.length;i++) {
            binarySortTree.add(new Node(arr[i]));
        }
        System.out.println("删除前中序遍历");
        binarySortTree.infixOrder();
        binarySortTree.delNode(9);
        binarySortTree.delNode(2);
        binarySortTree.delNode(3);
        binarySortTree.delNode(7);
        binarySortTree.delNode(5);
        binarySortTree.delNode(10);
        binarySortTree.delNode(1);
        binarySortTree.delNode(12);

        System.out.println("删除后中序遍历");
        binarySortTree.infixOrder();
    }
}

/**
 * 二叉排序树
 */
class BinarySortTree {
    private Node root;// 根节点
    // 添加结点
    public void add(Node node) {
        if (this.root == null) {
            this.root = node;
        } else {
            this.root.add(node);
        }
    }
    // 中序遍历
    public void infixOrder() {
        if (this.root == null) {
            System.out.println("二叉排序树为空");
        } else {
            this.root.infixOrder();
        }
    }

    /**
     * 查找要删除结点
     * @param value 待删除结点值
     * @return 待删除结点
     */
    public Node search(int value) {
        if (this.root == null) {
            return null;
        }
        // 正常查找
       return  this.root.search(value);
    }

    /**
     * 查找要删除结点的父节点
     * @param value 待删除结点
     * @return 父节点
     */
    public Node searchParent(int value) {
        if (this.root == null) {
            return null;
        }
        return this.root.searchParent(value);
    }

    /**
     * 删除结点步骤
     * @param value 待删除结点的值
     */
    public void delNode(int value) {
        if (this.root == null) {
            return;
        }
        // 首先找到待删除结点
        Node targetNode = search(value);
        if (targetNode == null) {
            return;// 没有待删除结点
        }
        // 说明此时只有一个结点 root就是要删除的结点
        if (this.root.left == null && this.root.right == null) {
            this.root = null;
            return;
        }
        // 待删除结点的父节点
        Node parentNode = searchParent(value);
        // 开始分三种情况开始讨论
        // 1.待删除结点是叶子结点
        if (targetNode.left == null && targetNode.right == null) {
            // 判断targetNode 是 父节点的哪个孩子结点
            if (parentNode.left != null && parentNode.left.value == value) {
                parentNode.left = null;
            } else if (parentNode.right != null  && parentNode.right.value == value){
                parentNode.right = null;
            }
        } else  if (targetNode.left != null && targetNode.right != null) {
            // 3.待删除结点有两个子树
            int retValue = minValue(targetNode.right);
            // 将当前待删除结点的值改动
            targetNode.value = retValue;
        } else {
            // 2.待删除结点有一个子树
            // 先判断是哪个子树
            if (targetNode.left != null) {
                // 判断是不是只有两个结点 待删除结点是根节点 无父节点
                if (parentNode != null) {
                    // 说明左子树不为空
                    // 此时再判断 targetNode 是 父节点的哪个孩子结点
                    if (parentNode.left != null && parentNode.left.value == value) {
                        parentNode.left = targetNode.left;
                    } else if (parentNode.right != null  && parentNode.right.value == value) {
                        // 右孩子结点
                        parentNode.right = targetNode.left;
                    }
                } else {
                    root = targetNode.left;
                }

            } else {
                // 判断是不是只有两个结点 待删除结点是根节点 无父节点
                if (parentNode != null) {
                    // 待删除结点有右子树
                    // 判断是父节点的哪个孩子结点
                    if (parentNode.left != null && parentNode.left.value == value) {
                        parentNode.left = targetNode.right;
                    } else if (parentNode.right != null  && parentNode.right.value == value) {
                        // 右孩子结点
                        parentNode.right = targetNode.right;
                    }
                } else {
                    root = targetNode.right;
                }
            }
        }
    }

    /**
     * 返回从根节点的右子树开始向左子树开始递归找到的最小值
     * @param node 结点
     * @return
     */
    public int minValue (Node node) {
        Node target = node;
        while (target.left != null) {
            target = target.left;
        }
        // 此时说明target的值最小
        // 首先需要删除这个最小值结点
        delNode(target.value);
        return target.value;
    }

    /**
     * 返回从根节点的左子树开始向右子树递归找到的最大值
     * @param node
     * @return
     */
    public int maxValue(Node node) {
        Node target = node;
        while (target.right != null) {
            target = target.right;
        }
        // 此时target的值最大
        // 首先删除这个最大值结点
        delNode(target.value);
        return target.value;
    }
}
/**
 * 结点类
 */
class Node {
    public int value;
    public Node left;
    public Node right;

    public Node(int value) {
        this.value = value;
    }

    @Override
    public String toString() {
        return "Node{" +
                "value=" + value +
                '}';
    }

    /**
     * 添加结点
     * @param node
     */
    public void add(Node node) {
        if (node == null) {
            return;
        }
        // 判断要添加结点与当前结点值的大小
        if (node.value < this.value) {
            if (this.left == null) {
                this.left = node;
            } else {
                // 向左子树递归
                this.left.add(node);
            }
        } else {
            if (this.right == null) {
                this.right = node;
            } else {
                // 向右子树递归
                this.right.add(node);
            }
        }
    }
    /**
     * 中序遍历
     */
    public void infixOrder() {
        if (this.left != null) {
            this.left.infixOrder();
        }
        System.out.println(this);
        if (this.right != null) {
            this.right.infixOrder();
        }
    }

    /**
     * 查找要删除的结点
     * @param value  删除结点的值
     * @return      删除结点
     */
    public Node search(int value) {
        if (value == this.value) {
            // 要删除结点就是当前结点
            return this;
        }
        // 向左子树递归查找
        if (value < this.value) {
            if (this.left == null) {
                return null;
            }
            return this.left.search(value);
        } else {
            // 向右子树递归查找
            if (this.right == null) {
                return null;
            }
            return this.right.search(value);
        }
    }

    /**
     * 查找要删除结点的父节点
     * @param value 待删除结点值
     * @return   删除结点的父节点
     */
    public Node searchParent(int value) {
        // 如果当前结点就是要删除结点的父节点就直接返回
        if ((this.left != null && this.left.value == value) || (this.right != null && this.right.value == value) ) {
            return this;
        }
        // 判断value 和 该结点的值的大小
        if (value < this.value && this.left != null) {
            // 向this的左子树递归查找
            return this.left.searchParent(value);
        } else if (value >= this.value && this.right != null) {
            // 向右子树递归
            return this.right.searchParent(value);
        } else {
            // 说明该结点没有父节点
            return null;
        }
    }
}
