package tree;

/**
 * @author 26568
 * @date 2022-07-03 11:49
 */
public class BinaryTreeTextDemo {
    public static void main(String[] args) {
        BinaryTree binaryTree = new BinaryTree();;
        // 创建四个节点
        HeroNode root = new HeroNode(1,"宋江");
        HeroNode node2 = new HeroNode(2,"吴用");
        HeroNode node3 = new HeroNode(3,"卢俊义");
        HeroNode node4 = new HeroNode(4,"林冲");
        HeroNode node5 = new HeroNode(5,"关胜");
        binaryTree.setRoot(root);
        root.setLeft(node2);
        root.setRight(node3);
        node3.setRight(node4);
        node3.setLeft(node5);
//        System.out.println("前序遍历");
//        binaryTree.preOrder();
//        System.out.println("中序遍历");
//        binaryTree.midOrder();
//        System.out.println("后序遍历");
//        binaryTree.postOrder();
//        System.out.println("后序遍历查找——————");
//        HeroNode resNode = binaryTree.postOrderSearch(5);
//        if (resNode != null) {
//            System.out.printf("查找到的信息为: data = %d  name = %s\n",resNode.getData(),resNode.getName());
//        } else {
//            System.out.printf("没有找到data = %d \n",5);
//        }
        System.out.println("删除前，前序遍历");
        binaryTree.preOrder();
        binaryTree.delNode(5);
        System.out.println("删除后，前序遍历");
        binaryTree.preOrder();
    }
}
/**
 * 二叉树
 */
class BinaryTree {
    // 有一个根节点
    private HeroNode root;

    public void setRoot(HeroNode root) {
        this.root = root;
    }
    /**
     * 前序遍历
     */
    public void preOrder() {
       if (this.root != null) {
           this.root.preOrder();
       } else {
           System.out.println("二叉树为空，操作失败");
       }
    }

    /**
     * 中序遍历
     */
    public void midOrder() {
        if (this.root != null) {
            this.root.midOrder();
        } else {
            System.out.println("二叉树为空，操作失败");
        }
    }
    /**
     * 后序遍历
     */
    public void postOrder() {
        if (this.root != null) {
            this.root.postOrder();
        } else {
            System.out.println("二叉树为空，操作失败");
        }
    }
    /**
     * 前序遍历查找
     */
    public HeroNode preOrderSearch(int data) {
        if (root != null) {
            return root.preOrderSearch(data);
        } else {
            return null;
        }
    }
    /**
     * 中序遍历查找
     */
    public HeroNode midOrderSearch(int data) {
        if (root != null) {
            return root.midOrderSearch(data);
        } else {
            return null;
        }
    }
    /**
     * 后续遍历查找
     */
    public HeroNode postOrderSearch(int data) {
        if (root != null) {
            return root.postOrderSearch(data);
        } else {
            return null;
        }
    }
    /**
     * 删除结点
     */
    public void delNode(int data) {
        if (root != null) {
            // 判断root是不是要删除的结点
            if (root.getData() == data) {
                root = null;
            } else {
                root.delNode(data);
            }
        } else {
            System.out.println("当前二叉树为空，操作失败");
        }
    }
}

/**
 * 节点
 */
class HeroNode {
    private int data;
    private String name;
    private HeroNode left;
    private HeroNode right;

    public HeroNode(int data, String name) {
        this.data = data;
        this.name = name;
    }

    public int getData() {
        return data;
    }

    public void setData(int data) {
        this.data = data;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public HeroNode getLeft() {
        return left;
    }

    public void setLeft(HeroNode left) {
        this.left = left;
    }

    public HeroNode getRight() {
        return right;
    }

    public void setRight(HeroNode right) {
        this.right = right;
    }

    @Override
    public String toString() {
        return "HeroNode{" +
                "data=" + data +
                ", name='" + name + '\'' +
                '}';
    }
    /**
     * 前序遍历: 根左右
     */
    public void preOrder() {
        System.out.println(this);// 先删除父节点
        // 递归左子树
        if (this.left != null) {
            this.left.preOrder();
        }
        // 递归右子树
        if (this.right != null) {
            this.right.preOrder();
        }
    }
    /**
     * 中序遍历：左根右
     */
    public void midOrder() {
        // 递归左子树
        if (this.left != null) {
            this.left.midOrder();
        }
        System.out.println(this);
        // 递归右子树
        if (this.right != null) {
            this.right.midOrder();
        }
    }
    /**
     * 后序遍历: 左右根
     */
    public void postOrder() {
        // 向左递归
        if (this.left != null) {
            this.left.postOrder();
        }
        // 向右递归
        if (this.right != null) {
            this.right.postOrder();
        }
        // 打印根节点
        System.out.println(this);
    }
    /**
     * 前序遍历查找
     */
    public HeroNode preOrderSearch(int data) {
        // 先判断当前结点
        System.out.println("进入前序遍历");
        if (this.data == data) {
            return this;
        }
        // 然后判断左子树是否为空，不为空就递归查找
        HeroNode resNode = null;
        if (this.left != null) {
            resNode = this.left.preOrderSearch(data);
        }
        // 此时需要判resNode是不是已经找到了
        if (resNode != null) {
            return resNode;
        }
        // 说明根左 都没找到，开始找右子树
        if (this.right != null) {
            resNode = this.right.preOrderSearch(data);
        }
        // 直接返回即可
        return resNode;
    }
    /**
     * 中序遍历查找
     */
    public HeroNode midOrderSearch(int data) {
        // 先判断左子树不为空
        HeroNode resNode = null;
        if (this.left != null) {
            resNode = this.left.midOrderSearch(data);
        }
        // 判断左子树是否找到
        if (resNode != null) {
            return resNode;
        }
        // 判断根节点
        System.out.println("进入中序遍历");
        if (this.data == data) {
            return this;
        }
        // 左根都没找到，开始右子树查找
        if (this.right != null) {
            resNode = this.right.midOrderSearch(data);
        }
        return resNode;
    }
    /**
     * 后续遍历查找
     */
    public HeroNode postOrderSearch(int data) {
        // 先判断左子树
        HeroNode resNode = null;
        if (this.left != null) {
            resNode = this.left.postOrderSearch(data);
        }
        // 判断左子树是否找到
        if (resNode != null) {
            return resNode;
        }
        // 再递归右子树
        if (this.right != null) {
            resNode = this.right.postOrderSearch(data);
        }
        if (resNode != null) {
            return resNode;
        }
        // 最后判断根节点
        System.out.println("进入后序遍历");
        if (this.data == data) {
            return this;
        }
        return resNode;// 说明resNode是空节点，都没有找到
    }
    /**
     * 删除结点： 1.首先判断当前结点是不是要删除结点，如果是就删除，不是的话就调用删除方法
     *          2.先判断当前结点的左节点是不是不为空且要是要删除的结点，那么就删除，并结束操作
     *          3.如果左子结点不是要删除的，那么就判断右结点是不是要删除的，是的话就删除，并结束操作
     *          4.如果左右结点都不是要删除的结点，那么我们开始递归，先递归做节点（不为空）
     *          5.左节点如果递归没删除掉，就递归右子树进行操作
     */
    public void delNode(int data) {
        if ((this.left != null) && (this.left.data == data)) {
            this.left = null;
            return;
        }
        if ((this.right != null) && (this.right.data == data)) {
            this.right = null;
            return;
        }
        // 开始递归
        if(this.left != null) {
            this.left.delNode(data);
        }
        if (this.right != null) {
            this.right.delNode(data);
        }
    }
}
