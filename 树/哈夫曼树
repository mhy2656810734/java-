package tree;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @author 26568
 *  哈夫曼树
 * @date 2022-07-07 13:08
 */
public class HuffManTreeText {
    public static void main(String[] args) {
        int[] arr = {13,7,8,3,29,6,1};
        Node node = huffMan(arr);
        preOrder(node);
    }
    /**
     * 哈夫曼方法
     * @param
     */
    public static Node huffMan(int[] arr) {
        // 先创建一个ArrayList
        List<Node> nodes = new ArrayList<Node>();
        for (int item: arr) {
            nodes.add(new Node(item));
        }
        while (nodes.size() > 1) {
            Collections.sort(nodes);
            Node leftNode = nodes.get(0);
            Node rightNode = nodes.get(1);
            Node parent = new Node(leftNode.value+ rightNode.value);
            parent.left = leftNode;
            parent.right = rightNode;
            nodes.add(parent);
            nodes.remove(leftNode);
            nodes.remove(rightNode);
        }
        return nodes.get(0);
    }
    public static void preOrder(Node root) {
        if (root != null) {
            root.preOrder();
        } else {
            System.out.println("该树为空，操作失败");
        }
    }
}
/**
 * 创建结点
 */
class Node implements Comparable<Node> {
    public int value; // 指针域
    public Node left; // 左孩子
    public Node right;// 右孩子
    public Node (int value) {
        this.value = value;
    }

    /**
     * 前序遍历
     */
    public void preOrder() {
        System.out.println(this);
        if (this.left != null) {
            this.left.preOrder();
        }
        if (this.right != null) {
            this.right.preOrder();
        }
    }
// 重写打印方法
    @Override
    public String toString() {
        return "Node{" +
                "value=" + value +
                '}';
    }
    // 重写排序方法
    @Override
    public int compareTo(Node o) {
        // 从小到大排序
        return this.value - o.value;
    }
}
