package tree;

import exercise.ArrayQueue;

/**
 * @author 26568
 * 顺序存储二叉树
 * @date 2022-07-04 14:01
 */
public class ArrayBinaryTreeTextDemo {
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,5,6,7};
        ArrayBinaryTree arrayBinaryTree = new ArrayBinaryTree(arr);
        System.out.println("前序遍历");
        arrayBinaryTree.preOrder();
        System.out.println("中序遍历");
        arrayBinaryTree.midOrder();
        System.out.println("后序遍历");
        arrayBinaryTree.postOrder();
    }
}
class ArrayBinaryTree{
    private int[] arr;

    public ArrayBinaryTree(int[] arr) {
        this.arr = arr;
    }
    // 重载
    public void preOrder() {
        this.preOrder(0);
    }
    /**
     * 前序遍历
     * @param index  数组下标
     */
    public void preOrder(int index) {
        // 先判断数组的合法性
        if (arr == null || arr.length == 0) {
            System.out.println("数组为空，无法进行前序遍历");
            return;
        }
        // 先输入当前下标的值
        System.out.println(arr[index]);
        // 向左递归
        if ((index * 2 +1) < arr.length) {
            preOrder(index * 2 +1);
        }
        // 向右递归
        if ((index * 2 +2) < arr.length) {
            preOrder(index * 2 + 2);
        }
    }
    public void midOrder() {
        this.midOrder(0);
    }
    /**
     * 中序遍历
     */
    public void midOrder(int index) {
        if (arr == null || arr.length == 0) {
            System.out.println("数组为空，无法进行前序遍历");
            return;
        }
        // 先递归左子树
        if ((index * 2 + 1) < arr.length) {
            midOrder(index * 2 + 1);
        }
        // 输出当前结点
        System.out.println(arr[index]);
        // 递归右子树
        if ((index * 2 + 2) < arr.length) {
            midOrder(index * 2 + 2);
        }
    }
    public void postOrder() {
        this.postOrder(0);
    }
    /**
     * 后续遍历
     */
    public void postOrder(int index) {
        if (arr == null || arr.length == 0) {
            System.out.println("数组为空，无法进行前序遍历");
            return;
        }
        // 先递归左子树
        if ((index * 2 + 1) < arr.length) {
            postOrder(index * 2 + 1);
        }
        // 再递归右子树
        if ((index * 2 + 2) < arr.length) {
            postOrder(index * 2 + 2);
        }
        // 输出当前结点
        System.out.println(arr[index]);
    }
}
