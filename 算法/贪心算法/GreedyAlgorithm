package algorithm;

import jdk.nashorn.internal.runtime.arrays.ArrayLikeIterator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

/**
 *  贪心算法
 * @author 26568
 * @date 2022-08-27 15:38
 */
public class GreedyAlgorithm {
    public static void main(String[] args) {
        // 创建一个map 里面存放广播电台
        HashMap<String, HashSet<String>> broadcasts = new HashMap<String, HashSet<String>>();
        // 将各个电台和地区的集合放入到map
        HashSet<String> hashSet1 = new HashSet<>();
        hashSet1.add("北京");
        hashSet1.add("上海");
        hashSet1.add("天津");
        HashSet<String> hashSet2 = new HashSet<>();
        hashSet2.add("广州");
        hashSet2.add("北京");
        hashSet2.add("深圳");
        HashSet<String> hashSet3 = new HashSet<>();
        hashSet3.add("成都");
        hashSet3.add("上海");
        hashSet3.add("杭州");
        HashSet<String> hashSet4 = new HashSet<>();
        hashSet4.add("上海");
        hashSet4.add("天津");
        HashSet<String> hashSet5 = new HashSet<>();
        hashSet5.add("杭州");
        hashSet5.add("大连");
        // 加入map
        broadcasts.put("K1",hashSet1);
        broadcasts.put("K2",hashSet2);
        broadcasts.put("K3",hashSet3);
        broadcasts.put("K4",hashSet4);
        broadcasts.put("K5",hashSet5);
        // 创建一个allAreas 集合 存放所有城市
        ArrayList<String> addAreas = new ArrayList<>();
        addAreas.add("上海");
        addAreas.add("北京");
        addAreas.add("天津");
        addAreas.add("广州");
        addAreas.add("深圳");
        addAreas.add("成都");
        addAreas.add("杭州");
        addAreas.add("大连");
        // 创建一个ArrayList存放选择的电台集合
        ArrayList<String> select = new ArrayList<>();
        // 创建一个临时集合temp  用来存储当前电台覆盖的地区 和 addAreas中还未覆盖地区的交集
        HashSet<String> temp = new HashSet<>();
        // 创建一个maxKey 表示每次选中的电台 值会一直进行修改
        String maxKey = null;
        // 如果addAreas中还有城市就一直循环，直到全部覆盖
        while (addAreas.size() > 0) {
           // 将maxK 置空  每次比较都需要进行重新选择
            maxKey = null;
            // 开始对所有电台进行循环比较
            for (String key:broadcasts.keySet()) {
                // 第一步先将temp置空 （避免temp上一步留下的数据对后续操作进行干扰）
                temp.clear();
                // 将当前 key 电台覆盖的地区放入到 temp中
                HashSet<String> hashSet = broadcasts.get(key);
                temp.addAll(hashSet);
                // 然后让 temp 和 addAreas 求交集 最后结果放到temp中
                temp.retainAll(addAreas);
                // 如果有交集 且 maxKey为空(说明是第一次比较) 或者 当前key（电台） 覆盖的城市 比 maxKey(电台)覆盖的地区多 就修改maxKey的值
                if (temp.size() > 0 &&
                        (maxKey == null || temp.size() > broadcasts.get(maxKey).size())
                ) {
                    maxKey = key;
                }
            }
            // 出循环后 就将此时选中的这个maxKey电台放入到select中
            if (maxKey != null) {
                select.add(maxKey);
                // 然后将maxKey电台覆盖的地区从addAreas中除去
                addAreas.removeAll(broadcasts.get(maxKey));
            }
        }
        // 输入最后的电台集合
        System.out.println(select);
    }
}
