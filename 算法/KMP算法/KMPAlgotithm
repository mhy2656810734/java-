package algorithm;

/**
 * @author 26568
 * @date 2022-08-25 15:19
 */
public class KMPAlgotithm {
    public static void main(String[] args) {
        String str1 = "BBC ABCDAB ABCDABCDABDE";
        String str2 = "ABCDABD";
        int[] next = kmpNext(str2);
        System.out.println(kmpSearch(str1,str2,next));
    }

    /**
     * Kmp搜索算法
     * @param str1 源字符串
     * @param str2 子串
     * @param next 子串部分匹配表
     * @return
     */
    public static int kmpSearch(String str1,String str2,int[] next) {
        for (int i = 0,j = 0; i < str1.length();i++) {
            // 需要处理 str1.charAt(i) != str2.charAt(j) 调整j的大小
            while (j > 0 && str1.charAt(i) != str2.charAt(j)) {
                j = next[j - 1];
            }
            if (str1.charAt(i) == str2.charAt(j)) {
                j++;
            }
            if (j == str2.length()) {
                // 找到了
                return i - j +1;
            }
        }
        return -1;
    }
    // 获取子串的部分匹配表
    public static int[] kmpNext(String dest) {
        // 创建一个next数组保存部分匹配值
        int[] next = new int[dest.length()];
        next[0] = 0;
        for (int i = 1,j = 0; i < dest.length();i++) {
            // 当 dest.charAt(i) != dest.charAt(j) 时，我们需要从next[j - 1] 获取新的j
            // 直到相等才退出
            while (j > 0 && dest.charAt(i) != dest.charAt(j)) {
                j = next[j - 1];
            }
            // dest.charAt(i) == dest.charAt(j) 时 部分匹配值就加一
            if (dest.charAt(i) == dest.charAt(j)) {
                j++;
            }
            next[i] = j;
        }
        return next;
    }
}
package algorithm;

/**
 * @author 26568
 * @date 2022-08-25 15:19
 */
public class KMPAlgotithm {
    public static void main(String[] args) {
        String str1 = "BBC ABCDAB ABCDABCDABDE";
        String str2 = "ABCDABD";
        int[] next = kmpNext(str2);
        System.out.println(kmpSearch(str1,str2,next));
    }

    /**
     * Kmp搜索算法
     * @param str1 源字符串
     * @param str2 子串
     * @param next 子串部分匹配表
     * @return
     */
    public static int kmpSearch(String str1,String str2,int[] next) {
        for (int i = 0,j = 0; i < str1.length();i++) {
            // 需要处理 str1.charAt(i) != str2.charAt(j) 调整j的大小
            while (j > 0 && str1.charAt(i) != str2.charAt(j)) {
                j = next[j - 1];
            }
            if (str1.charAt(i) == str2.charAt(j)) {
                j++;
            }
            if (j == str2.length()) {
                // 找到了
                return i - j +1;
            }
        }
        return -1;
    }
    // 获取子串的部分匹配表
    public static int[] kmpNext(String dest) {
        // 创建一个next数组保存部分匹配值
        int[] next = new int[dest.length()];
        next[0] = 0;
        for (int i = 1,j = 0; i < dest.length();i++) {
            // 当 dest.charAt(i) != dest.charAt(j) 时，我们需要从next[j - 1] 获取新的j
            // 直到相等才退出
            while (j > 0 && dest.charAt(i) != dest.charAt(j)) {
                j = next[j - 1];
            }
            // dest.charAt(i) == dest.charAt(j) 时 部分匹配值就加一
            if (dest.charAt(i) == dest.charAt(j)) {
                j++;
            }
            next[i] = j;
        }
        return next;
    }
}
