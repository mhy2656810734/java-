package algorithm;

import java.util.Arrays;

/**
 * 普里姆算法 - 修路问题
 * @author 26568
 * @date 2022-08-28 14:27
 */
public class PrimAlgorithm {
    public static void main(String[] args) {
        char[] data = {'A','B','C','D','E','F','G'};
        int verxs = data.length;
        // 10000表示两个点不连通
        int[][] weight = new int[][] {
                {10000,5,7,10000,1000,10000,2},
                {5,10000,10000,9,10000,10000,3},
                {7,10000,10000,10000,8,10000,10000},
                {10000,9,10000,10000,10000,4,10000},
                {10000,10000,8,10000,10000,5,4},
                {10000,10000,10000,4,5,10000,6},
                {2,3,10000,10000,4,5,10000}};
        Graph graph = new Graph(verxs);
        MinTree minTree = new MinTree();
        minTree.createGraph(graph,verxs,data,weight);
        minTree.showGraph(graph);
        minTree.prim(graph,5);
    }
}

/**
 * 最小生成树
 */
class MinTree {
    /**
     * 创建图的最小生成树
     * @param graph 图
     * @param verxs 图的结点个数
     * @param data 图的结点
     * @param weight 邻接矩阵
     */
    public void createGraph(Graph graph,int verxs,char[] data,int[][] weight) {
        int i,j;
        for (i = 0; i < verxs;i++) {
            graph.data[i] = data[i];
            for (j = 0; j < verxs;j++) {
                graph.weight[i][j] = weight[i][j];
            }
        }
    }
    // 显示图的邻接矩阵
    public void showGraph(Graph graph) {
        for (int[] arr: graph.weight) {
            System.out.println(Arrays.toString(arr));
        }
    }

    /**
     * 普里姆算法
     * @param graph 图
     * @param v 传入的结点
     */
    public void prim(Graph graph,int v) {
        // 创建一个数组 visited 标记当前v下标的结点是否被访问过   0表示没有访问过 1表示已经访问过
        int[] visited = new int[graph.verxs];
        // 将传入的结点标记为已经访问
        visited[v] = 1;
        // 创建 h1 和 h2 两个下标 记录选中的两个结点的下标
        int h1 = -1;
        int h2 = -1;
        // 创建一个权值
        int weight = 10000;//  用于记录最小的那条权值边
        // 首先确定循环处理次数  7个顶点 6条边
        for (int k = 1; k < graph.verxs;k++) {
            // 开始遍历结点
            for (int i = 0; i < graph.verxs;i++) { // i 表示已经访问过的结点
                for (int j = 0;j < graph.verxs;j++) { // j 表示没有访问过的结点
                    // 从每一个已经访问过的结点开始查找 与其相连的未被访问的结点的最小权值
                    if (visited[i] == 1 && visited[j] == 0 && graph.weight[i][j] < weight) {
                        weight = graph.weight[i][j];
                        h1 = i;
                        h2 = j;
                    }

                }
            }
            // 此时找到最小的边权值为 weight 结点是 h1 和 h2
            System.out.println("边<"+graph.data[h1]+","+graph.data[h2]+">"+" 权值为:"+weight);
            // 此时还需要将已经访问过的结点标记为已访问
            visited[h2] = 1;
            // 重新设置weight值 选下一条边
            weight = 10000;
        }
    }
}
/**
 * 创建图
 */
class Graph {
    public int verxs;// 表示结点的个数
    public char[] data;// 表示图的结点值
    public int[][] weight;// 表示每两个结点之间的权值
    // 构造方法
    public Graph (int verxs) {
        this.verxs = verxs;
        data = new char[verxs];
        weight = new int[verxs][verxs];
    }
}
