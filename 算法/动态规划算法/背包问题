package algorithm;

/**动态规划
 * @author 26568
 * @date 2022-08-24 16:10
 */
public class KnapsackProblem {
    public static void main(String[] args) {
        int[] w = {1, 4, 3};// 物品的重量
        int[] val = {1500, 3000, 2000};
        int m = 4;// 背包的容量
        int n = val.length;// 物品的数量
        // 创建二维数组  v[i][j] 表示在前i个物品中能够装入容量为j的背包中的最大价值
        int[][] v = new int[n + 1][m + 1];
        // 用来记录商品的放入情况
        int[][] path = new int[n + 1][m + 1];
        // 先将第一行和第一列初始化为0
        for (int i = 0; i < v.length; i++) {
            for (int j = 0; j < v[i].length; j++) {
                v[0][j] = 0;
                v[i][0] = 0;
            }
        }
        // 进行动态规划处理
        for (int i = 1; i < v.length; i++) { // 从不处理第一行
            for (int j = 1; j < v[i].length; j++) {// 不处理第一列
                // 根据公式进行判断
                if (w[i - 1] > j) {
                    // 当要装入的物品的重量大于背包的容量
                    // 我们的i必须-1 因为我们从第一个开始
                    v[i][j] = v[i - 1][j];// 直接使用上一格的装入策略
                } else {
                    // 如果要装入的物品的容量小于当前背包的容量
                    // 需要按照如下公式装入
                    v[i][j] = Math.max(v[i - 1][j], val[i - 1] + v[i - 1][j - w[i - 1]]);
                    if (v[i - 1][j] < val[i - 1] + v[i - 1][j - w[i - 1]]) {
                        v[i][j] = val[i - 1] + v[i - 1][j - w[i - 1]];
                        path[i][j] = 1;
                    } else {
                        v[i][j] = v[i - 1][j];
                    }
                }
            }
        }
        int i = path.length - 1;// 行的最大下标
        int j = path[0].length - 1; // 列的最大下标
        while (i > 0 && j > 0) {// 从path的最后面开始找
            if (path[i][j] == 1) {
                System.out.printf("第%d个商品放入到背包\n", i);
                j -= w[i - 1];// 容量要变化
            }
            i--;
        }
    }
}
