package algorithm.floyd;

import java.util.Arrays;

/**
 * @author 26568
 * @date 2022-09-01 19:47
 */
public class FloydAlgorithm {
    public static void main(String[] args) {
        char[] vertex = {'A','B','C','D','E','F','G'};
        int[][] matrix = new int[vertex.length][vertex.length];
        final int N = 65535;
        matrix[0] = new int[]{0,5,7,N,N,N,2};
        matrix[1] = new int[]{5,0,N,9,N,N,3};
        matrix[2] = new int[]{7,N,0,N,8,N,N};
        matrix[3] = new int[]{N,9,N,0,N,4,N};
        matrix[4] = new int[]{N,N,8,N,0,5,4};
        matrix[5] = new int[]{N,N,N,4,5,0,6};
        matrix[6] = new int[]{2,3,N,N,4,6,0};
        // 创建Graph对象
        Graph graph = new Graph(vertex.length, matrix,vertex);
        graph.floyd();
        graph.show();
    }
}
// 图
class Graph {
    private char[] vertex;// 顶点矩阵
    private int[][] dis;// 各个顶点到各个顶点的距离
    private int[][] pre;// 保存到达目标顶点的前驱顶点

    /**
     * 构造器
     * @param length 顶点个数
     * @param matrix 邻接矩阵
     * @param vertex 顶点数组
     */
    public Graph(int length,int[][] matrix,char[] vertex) {
        this.dis = matrix;
        this.vertex = vertex;
        pre = new int[length][length];
        // 对pre数组进行初始化，注意存放的是前驱顶点的下标
        for (int i = 0; i < length;i++) {
            Arrays.fill(pre[i],i);
        }
    }
    // 显示pre数组和dis数组
    public void show() {
        // 为了便于显示 优化一下输出
        char[] vertex = {'A','B','C','D','E','F','G'};
        for (int k = 0; k < dis.length;k++) {
            // 先将pre数组输出一行
            for (int i = 0; i < dis.length;i++) {
                System.out.print(vertex[pre[k][i]]+" ");
            }
            System.out.println();
            // 输出dis数组的一行数据
            for (int i = 0; i < dis.length;i++) {
                System.out.print("("+vertex[k]+"到"+vertex[i]+"最短的距离是"+dis[k][i]+") ");
            }
            System.out.println();
        }
    }
    // 弗洛伊德算法
    public void floyd() {
        int len = 0;// 记录从一个顶点到另外一个顶点的距离
        // k 代表中间顶点
        for (int k = 0;k < dis.length;k++) {
            // i代表出发结点
            for (int i = 0; i < dis.length;i++) {
                // j代表终点
                for (int j = 0; j < dis.length;j++) {
                    // 先求出 从i顶点 出发经过 k顶点 到达j顶点的距离
                    len = dis[i][k] +dis[k][j];
                    if (len < dis[i][j]) {
                        // 如果从i顶点 出发经过 k顶点 到达j顶点的距离 小于 i顶点直接到j顶点的距离就替换
                        dis[i][j] = len;
                        // 更新前驱顶点
                        pre[i][j] = pre[k][j];
                    }
                }
            }
        }
    }
}
