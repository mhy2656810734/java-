package algorithm.dijkstraalgorithm;

import java.util.Arrays;

/**
 * @author 26568
 * @date 2022-08-31 21:20
 */
public class DijkstraAlgorithm {
    public static void main(String[] args) {
        char[] vertex = {'A','B','C','D','E','F','G'};
        int[][] matrix = new int[vertex.length][vertex.length];
        final int N = 65535;// 表示两个顶点不能连接
        matrix[0] = new int[]{N,5,7,N,N,N,2};
        matrix[1] = new int[]{5,N,N,9,N,N,3};
        matrix[2] = new int[]{7,N,N,N,8,N,N};
        matrix[3] = new int[]{N,9,N,N,N,4,N};
        matrix[4] = new int[]{N,N,8,N,N,5,4};
        matrix[5] = new int[]{N,N,N,4,5,N,6};
        matrix[6] = new int[]{2,3,N,N,4,6,N};
        // 创建Graph对象
        Graph graph = new Graph(vertex,matrix);
        // 打印举证
        graph.showGraph();
        // 测试迪杰斯特拉算法
        graph.dijkstra(6);
        graph.showDijkstra();
    }
}
/**
 * 已访问顶点集合
 */
class VisitedVertex {
    // 记录每个顶点是否被访问过，被访问过 1  没有访问过 0
    public int[] already_arr;
    // 每一个顶点的下标对应的值为前一个顶点 会动态更新
    public int[] pre_visited;
    // 记录出发顶点到其他顶点的距离，会动态更新
    public int[] dis;

    /**
     * 构造器
     * @param length 顶点的个数
     * @param index 出发顶点的下标
     */
    public VisitedVertex(int length,int index) {
        this.already_arr = new int[length];
        this.pre_visited = new int[length];
        this.dis = new int[length];
        // 初始化dis数组
        Arrays.fill(dis,65535);
        this.already_arr[index] = 1;// 设置出发顶点被访问过
        this.dis[index] = 0;// 设置出发顶点的距离为 0
    }

    /**
     * 判断index顶点是否被访问过
     * @param index
     * @return
     */
    public boolean isVisited(int index) {
        return already_arr[index] == 1;
    }

    /**
     *  更新出发顶点到index顶点的距离
     * @param index 顶点
     * @param len 距离
     */
    public void updateDis(int index,int len) {
        dis[index] = len;
    }

    /**
     * 更新pre顶点的前驱顶点为index
     * @param pre
     * @param index
     */
    public void updatePre(int pre,int index) {
        pre_visited[pre] = index;
    }

    /**
     * 返回出发顶点到index顶点的距离
     * @param index
     * @return
     */
    public int getDis(int index) {
        return dis[index];
    }
    /**
     * 继续选择并返回新的访问结点，比如G完后，以A为新的访问顶点（不是出发顶点）
     */
    public int updataArr() {
        int min = 65535,index = 0;
        for (int i = 0; i < already_arr.length;i++) {
            if (already_arr[i] == 0 && dis[i] < min) {
                min = dis[i];
                index = i;
            }
        }
        // 更新index顶点被访问过
        already_arr[index] = 1;
        return index;

    }
    // 显示最后的结果
    // 即：将最后三个结果数组输出
    public void show() {
        System.out.println("=====================================");
        for (int i : already_arr) {
            System.out.print(i+" ");
        }
        System.out.println();
        // 输出pre_visited
        for (int i:pre_visited) {
            System.out.print(i+" ");
        }
        System.out.println();
        // 输出dis
        for(int i : dis) {
            System.out.print(i+" ");
        }
        System.out.println();
        // 为了结果好看，进行处理
        char[] vertex = {'A','B','C','D','E','F','G'};
        int count = 0;
        for (int i:dis) {
            if (i!=65535) {
                System.out.print(vertex[count]+"("+i+")"+" ");
            } else {
                System.out.println("N ");
            }
            count++;
        }
        System.out.println();
    }
}

/**
 * 图类
 */
class Graph {
    private char[] vertex;// 顶点数组
    private int[][] matrix;// 邻接矩阵
    private VisitedVertex vv;// 已经访问的顶点的集合
    public Graph(char[] vertex, int[][] matrix) {
        this.vertex = vertex;
        this.matrix = matrix;
    }
    public void showDijkstra() {
        vv.show();
    }
    // 显示图
    public void showGraph() {
        for (int[] arr:matrix) {
            System.out.println(Arrays.toString(arr));
        }
    }

    /**
     * 迪杰斯特拉算法
     * @param index 出发顶点
     */
    public void dijkstra(int index) {
        vv = new VisitedVertex(vertex.length, index);
        update(index);//  更新index下标顶点到周围顶点的距离 和 周围顶点的前驱顶点
        // index结点已经被处理过
        for (int j = 1;j < vertex.length;j++) {
            index = vv.updataArr();// 选择并返回新的访问结点
            update(index); // 更新index下标顶点到周围顶点的距离 和 周围顶点的前驱顶点
        }
    }
    // 更新index下标顶点到周围顶点的距离 和 周围顶点的前驱顶点
    private void update(int index) {
        int len = 0;
        // 根据遍历邻接矩阵matrix[index] 行
        for (int j = 0; j < matrix[index].length;j++) {
            // len 含义是： 出发顶点到index顶点的距离 + 从index顶点到j顶点的距离
            len = vv.getDis(index) + matrix[index][j];
            // 如果j顶点没有被访问过， 且len 小于出发顶点到j顶点的距离 就需要更新
            if (!vv.isVisited(j) && len < vv.getDis(j)) {
                vv.updatePre(j,index);// 更新j顶点的前驱顶点为index顶点
                vv.updateDis(j,len);// 更新出发顶点到j顶点的距离
            }
        }
    }
}
