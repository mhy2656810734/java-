package graph;

import java.util.ArrayList;
import java.util.Arrays;

/**
 * @author 26568
 * @date 2022-08-21 14:36
 */
public class Graph {
    private ArrayList<String> vetexList;// 存储顶点集合
    private int[][] edges;// 存储图对应的邻接矩阵
    private int numOfEdges;// 表示边的数目

    public static void main(String[] args) {
        int n = 5;
        String[] str = {"A","B","C","D","E"};
        // 创建图的对象
        Graph graph = new Graph(n);
        // 循环添加结点
        for (String str1:str) {
            graph.insertVertex(str1);
        }
        // 添加边
        graph.insertEdge(0,1,1);
        graph.insertEdge(0,2,1);
        graph.insertEdge(1,2,1);
        graph.insertEdge(1,3,1);
        graph.insertEdge(1,4,1);
        // 展示矩阵
        graph.show();
    }

    /**
     * 构造器
     *
     * @param n 结点的个数
     */
    public  Graph(int n) {
        vetexList = new ArrayList<>(n);
        edges = new int[n][n];
    }

    // 添加结点
    public void insertVertex(String str) {
        vetexList.add(str);
    }

    /**
     * 设置边
     *
     * @param v1     下标
     * @param v2     下标
     * @param weight 权值
     */
    public void insertEdge(int v1, int v2, int weight) {
        edges[v1][v2] = weight;
        edges[v2][v1] = weight;
        numOfEdges++;
    }

    // 得到边的数目
    public int getNumOfEdges() {
        return numOfEdges;
    }

    // 得到结点个数
    public int getNumofVertex() {
        return vetexList.size();
    }

    // 返回下标 i 对应的结点值
    public String getValue(int i) {
        return vetexList.get(i);
    }
    // 返回下标 v1 v2对应的权值
    public int getWeight(int v1,int v2) {
        return edges[v1][v2];
    }
    // 显示图对应的矩阵
    public void show() {
        for (int[] arr:edges) {
            System.out.println(Arrays.toString(arr));
        }
    }
}
